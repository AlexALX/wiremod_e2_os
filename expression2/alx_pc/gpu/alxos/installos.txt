@name Install OS GPU
@persist IOS_FsTbl:table IO_Tmp:table

#[
	ALX Wiremod E2 OS
	Created by AlexALX
	-------------------
	Install OS Programm with partition manager
]#

if (INCLUDE) {
 
#include "alx_pc/gpu/_main_"
#include "alx_pc/shared/_main_"
#include "alx_pc/shared/cmd"

function installheader() {
    EGP:egpBox(LAST_I,vec2(0,0),vec2(512,512))
    EGP:egpColor(LAST_I,0,0,168,255) LAST_I++

    EGP:egpText(LAST_I,"ALX Wiremod E2 OS - Setup",vec2(10,20))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
    
    EGP:egpBox(LAST_I,vec2(0,42),vec2(210,1))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++

    EGP:egpBox(LAST_I,vec2(0,44),vec2(210,1))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++   
    
    LAST_Y=60
}

function number installfooter(Str:string) {
    EGP:egpBox(LAST_I,vec2(0,492),vec2(512,20))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
    
    EGP:egpText(LAST_I,Str,vec2(20,492))
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    return LAST_I-1
}

function number installos(Args:table) {
    if (!checkPerf(8000)) {
        IO_Tmp = Args
        timer("installos",1)   
        return 1
    }
    
    local Step = Args[1,string]

    if (Step=="welcome") {
        
    hddload(0)        
    egpClear()
    KeyHandler = "installos_key"
    DsHandler = "installos_ds"
    installheader()
    
    local Y = LAST_Y #10+LAST_I*12
    EGP:egpText(LAST_I,"Welcome to Setup.",vec2(20,Y))
    EGP:egpColor(LAST_I,255,255,255,255) LAST_I++ Y+=30
    
    EGP:egpText(LAST_I,"This portion of the Setup program prepares",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    
    EGP:egpText(LAST_I,"ALX Wiremod E2 OS to run on your computer.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    
    EGP:egpText(LAST_I,"* To setup ALX Wiremod E2 OS now, press ENTER.",vec2(30,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    
    EGP:egpText(LAST_I,"* To quit Setup without intalling, press F3.",vec2(30,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    
    installfooter("ENTER=Continue    F3=Quit")
    
    INSTALL = 1
    if (DEBUG) { runCmd("installos",1,table("pre_hdds")) }
    
    } elseif (Step=="pre_hdds") {
    
    egpClear()
    installheader()
    
    local Y = LAST_Y
    
    EGP:egpText(LAST_I,"The following list shows the existing partitions and",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    
    EGP:egpText(LAST_I,"unpartitioned space on this computer.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    
    EGP:egpText(LAST_I,"Use the UP and DOWN ARROW keys to select an item in the list.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
     
    EGP:egpText(LAST_I,"* To set up ALX Wiremod E2 OS on the selected item, press ENTER.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    
    EGP:egpText(LAST_I,"* To create a partition in the unpartitioned space, press C.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    
    EGP:egpText(LAST_I,"* To delete selected partition, press D.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    
    EGP:egpText(LAST_I,"* To format selected disk, press F.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30

    GpuData[-1,number] = LAST_I
    EGP:egpBox(LAST_I,vec2(20,Y),vec2(472,492-Y-20))
    EGP:egpOrder(LAST_I,1)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++

    EGP:egpBoxOutline(LAST_I,vec2(20,Y),vec2(472,492-Y-20))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=5
    
    EGP:egpText(LAST_I,"Loading...",vec2(30,Y))
    EGP:egpColor(LAST_I,168,168,168,255)
    
    LAST_Y = Y
    
    GpuData[2,number] = Args[2,number]
    
    dsSendDirect("hddfstbl",HDD_IO:entity(),entity())
    #installos(table(2))
    return 0
      
    } elseif (Step=="hdds") {

    #local Tbl = dsGetTable()
    local FsTbl = dsGetTable() #Tbl[2,table]
    IOS_FsTbl = FsTbl
    #printTable(FsTbl)
    #HDDInfo = Tbl[1,array]
    local Y = 5 #LAST_Y
    
    local Parent = GpuData[-1,number]
    local Size = EGP:egpSize(Parent)
    local Spos = vec2(Size[1]/2*(-1)+10,Size[2]/2*(-1))
    
    local CurIndex = 1 #GpuData[2,number]
    if (CurIndex==0) { CurIndex = 1 }
    
    GpuData[2,number] = LAST_I
    GpuData[-2,number] = Spos[2]
    GpuData[-3,number] = Spos[2]
    GpuData[-4,vector2] = EGP:egpPos(Parent)
    EGP:egpBox(LAST_I,Spos+vec2(10,Y+20),vec2(432,20))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
    
    local IndexTbl = table()
    local Index = 1
    local TotalI = 0
    
    for (I=1,HDD_MAX) {
        local HDDInfo = HDDS[I,table]
        if (!HDDInfo:count() | HDDInfo["type",number]!=0) { continue }
        local Sz = (HDDInfo["size",number]*HDDInfo["sector_size",number])/1024
        TotalI++
        EGP:egpText(LAST_I,Sz+" KB Disk "+(I-1)+" at Id 0 on bus 0 on atapi [MBR]",Spos+vec2(0,Y))
        EGP:egpParent(LAST_I,Parent)
        if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=20
        
        if (FsTbl[I,table]:count()) {            
            local FsItemTbl = FsTbl[I,table]
            local SzF = HDDInfo["fs_max_size",number]
            local LastSpace = HDDInfo["fs_tbl_size",number]
            local II = 1
            for(C=0,FsItemTbl:count()-1) {
                local Item = FsItemTbl[C,table]
                if (Item["total",number]>0) {
                    if (Item["start",number]>LastSpace) {
                        local Col = vec4(168,168,168,255)
                        if (Index==CurIndex) { 
                            Col = vec4(0,0,168,255) 
                            #local BOXID = GpuData[2,number]
                            #EGP:egpPos(BOXID,vec2(40,Y))
                        }
                        
                        local SzT = Item["start",number]-LastSpace
                        
                        local Sz = SzT*HDDInfo["sector_size",number]
                    
                        if (FsItemTbl[C-1,table]["start",number]!=0) {
                            Col = vec4(100,100,100,255)   
                        } else {
                            IndexTbl[Index,array] = array(I,LAST_I,Spos[2]+Y,Sz,C-1,0) Index++
                        }
                        EGP:egpText(LAST_I,"Unpartitioned space",Spos+vec2(30,Y))
                        EGP:egpParent(LAST_I,Parent)
                        if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
                        EGP:egpColor(LAST_I,Col) LAST_I++
                        
                        local SzS = Sz+" Bytes" 
                        if (Sz/1024>1) {
                            SzS = floor(Sz/1024,2)+" KB"
                        }                
                        EGP:egpText(LAST_I,SzS,Spos+vec2(330,Y))
                        EGP:egpParent(LAST_I,Parent)
                        if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
                        EGP:egpColor(LAST_I,Col) LAST_I++ Y+=20
                        SzF -= SzT
                        II++
                    }
                    LastSpace = Item["end",number]
                    SzF -= Item["total",number]
                    
                    local FName = FS_TYPES[Item["type",number],string]
                    if (FName=="") { FName = "Unknown" }
                        
                    local Col = vec4(168,168,168,255)
                    if (Index==CurIndex) { 
                        Col = vec4(0,0,168,255) 
                        if (FName=="WM1") {
                            FooterStr = "ENTER=Install    D=Delete Partition    F=Format Disk    F3=Quit"                            
                        } else {
                            FooterStr = "D=Delete Partition    F=Format Disk    F3=Quit"
                        }
                    }
                    
                    local Sz = Item["total",number]*HDDInfo["sector_size",number]
                    
                    IndexTbl[Index,array] = array(I,LAST_I,Spos[2]+Y,Sz,C,Item["type",number]) Index++
                    EGP:egpText(LAST_I,"Partition"+C+" ["+FName+"]",Spos+vec2(30,Y))
                    EGP:egpParent(LAST_I,Parent)
                    if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
                    EGP:egpColor(LAST_I,Col) LAST_I++
                    
                    local SzS = Sz+" Bytes" 
                    if (Sz/1024>1) {
                        SzS = floor(Sz/1024,2)+" KB"
                    }
                    
                    EGP:egpText(LAST_I,SzS,Spos+vec2(330,Y))
                    EGP:egpParent(LAST_I,Parent)
                    if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
                    EGP:egpColor(LAST_I,Col) LAST_I++ Y+=20
                    II++
                }
            }
            if (SzF>0) {
                local Col = vec4(168,168,168,255)
                if (Index==CurIndex) { Col = vec4(0,0,168,255) }
                
                local Sz = SzF*HDDInfo["sector_size",number]
            
                if (II<5) {
                    local N = -1
                    if (II>0) { N = II-1 }
                    IndexTbl[Index,array] = array(I,LAST_I,Spos[2]+Y,Sz,N,0) Index++
                } else {
                    Col = vec4(100,100,100,255)
                }
                EGP:egpText(LAST_I,"Unpartitioned space",Spos+vec2(30,Y))
                EGP:egpParent(LAST_I,Parent)
                if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
                EGP:egpColor(LAST_I,Col) LAST_I++
                
                if (SzF==HDDInfo["fs_max_size",number]) {
                    Sz = HDDInfo["size",number]*HDDInfo["sector_size",number]
                }
                
                local SzS = Sz+" Bytes" 
                if (Sz/1024>1) {
                    SzS = floor(Sz/1024,2)+" KB"
                }
                          
                EGP:egpText(LAST_I,SzS,Spos+vec2(330,Y))
                EGP:egpParent(LAST_I,Parent)
                if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
                EGP:egpColor(LAST_I,Col) LAST_I++ Y+=20
            }
        } else {        
            local Col = vec4(168,168,168,255)
            if (Index==1) { Col = vec4(0,0,168,255) }
            local Txt = "Unpartitioned space"
            if (HDDInfo["size",number]<1) { 
                Col = vec4(100,100,100,255)
                Txt = "Disk Error"
            } else {
                IndexTbl[Index,array] = array(I,LAST_I,Spos[2]+Y,HDDInfo["fs_max_size",number]*HDDInfo["sector_size",number],-1,0) 
                Index++
            }
                        
            local Sz = HDDInfo["size",number]*HDDInfo["sector_size",number]
            
            EGP:egpText(LAST_I,Txt,Spos+vec2(30,Y))
            EGP:egpParent(LAST_I,Parent)
            if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            local SzS = Sz+" Bytes" 
            if (Sz/1024>1) {
                SzS = floor(Sz/1024,2)+" KB"
            }        
            EGP:egpText(LAST_I,SzS,Spos+vec2(330,Y))
            EGP:egpParent(LAST_I,Parent)
            if (Y>225) { EGP:egpPos(LAST_I,EGP:egpPos(LAST_I)+vec2(-1024,0)) }
            EGP:egpColor(LAST_I,Col) LAST_I++ Y+=20
        }    
    }
    
    if (!TotalI) {
        LAST_I--
        EGP:egpText(LAST_I,"No hard drives found.",Spos+vec2(0,Y))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=20
        
        FooterStr = "F3=Quit"
    }
    
    GpuData[3,table] = IndexTbl
    GpuData[4,number] = CurIndex
    GpuData[-5,number] = LAST_I-1
    
    if (FooterStr=="") { FooterStr = "C=Create Partition    F=Format Disk    F3=Quit" }
    
    #installfooter("ENTER=Install    C=Create Partition    F3=Quit")
    installfooter(FooterStr)
    GpuData[5,number] = LAST_I-1
    
    #if (DEBUG) { runCmd("installos",1,table(3)) }
    #if (DEBUG) { installos(table(9)) } 
        
    } elseif (Step=="pre_format") {
    
    local Item = GpuData[3,table][GpuData[4,number],array]
    local Index = Item[1,number]
    local HDDInfo = HDDS[Index,table]

    egpClear()
    installheader()
    Y = LAST_Y
    local Sz = (HDDInfo["size",number]*HDDInfo["sector_size",number])/1024
    
    EGP:egpText(LAST_I,"You asked Setup to create a new partition on",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    EGP:egpText(LAST_I,Sz+" KB Disk "+(Index-1)+" at Id 0 on bus 0 on atapi [MBR]",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    
    EGP:egpText(LAST_I,"Use the UP and DOWN ARROW keys to select the file system",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    EGP:egpText(LAST_I,"you want, and then press ENTER.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    EGP:egpText(LAST_I,"If you want select a different partition, press F1.",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    
    GpuData[2,number] = LAST_I
    GpuData[3,vector2] = vec2(30,Y)
    EGP:egpBox(LAST_I,vec2(30,Y),vec2(452,20))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
    
    local Keys = FS_TYPES:keys()
    local Items = array()
    local ID = 1

    for (I=2,Keys:count()) {
        local ItemN = FS_TYPES[Keys[I,number],string]
        if (ItemN=="WCD") { continue }
        Items[ID,number] = Keys[I,number] ID++
        EGP:egpText(LAST_I,"Format the partition using the "+ItemN+" file system (Quick)",vec2(35,Y))
        local Col = vec4(168,168,168,255)
        if (ID==2) { Col = vec4(0,0,168,255) }
        EGP:egpColor(LAST_I,Col) LAST_I++ Y+=20
    }
    
    local FsItem = FS_TYPES[1,string]
    Items[ID,number] = 1
    EGP:egpText(LAST_I,"Format the partition using the "+FsItem+" file system (Quick)",vec2(35,Y))
    local Col = vec4(168,168,168,255)
    if (ID==1) { Col = vec4(0,0,168,255) }
    EGP:egpColor(LAST_I,Col) LAST_I++ Y+=20
    
    GpuData[4,number] = 0
    GpuData[5,number] = Items:count()
    GpuData[6,table] = HDDInfo
    GpuData[7,array] = Item
    GpuData[8,array] = Items
    
    installfooter("ENTER=Continue    F1=Cancel")
    
    } elseif (Step=="format_key") {
        
        local Key = GpuData[4,number]+1
        local Max = GpuData[5,number]
        if (Key>Max) { Key = 1 }
        local Items = GpuData[8,array]
        
        installos(table("format_opts",Items[Key,number]))
        return 0
        
    } elseif (Step=="format_opts") {
    
    local HDDInfo = GpuData[6,table]
    local IndArr = GpuData[7,array]
    local Index = IndArr[1,number]
    local Sz = (HDDInfo["size",number]*HDDInfo["sector_size",number])/1024
    
    local CurSz = IndArr[4,number]
    
    local FS = Args[2,number]
    
    egpClear()
    installheader()
    local Y = LAST_Y
    
    GpuData[2,number] = FS
    GpuData[3,table] = HDDInfo
    GpuData[4,array] = IndArr
    GpuData[0,number] = Index
    
    local Item = FS_TYPES[FS,string]
    
    EGP:egpText(LAST_I,"You asked Setup to create a "+Item+" file system on",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    EGP:egpText(LAST_I,Sz+" KB Disk "+(Index-1)+" at Id 0 on bus 0 on atapi [MBR]",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    
    EGP:egpText(LAST_I,"* To create the new partition, enter a size,",vec2(30,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    EGP:egpText(LAST_I,"cluster size below and press ENTER.",vec2(30,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
    
    EGP:egpText(LAST_I,"* To go back to the previous screen without creating",vec2(30,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    EGP:egpText(LAST_I,"the partition, press F1.",vec2(30,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
 
    EGP:egpText(LAST_I,"The minimum size for the new partition is "+(FS==2 ? 512 : 4 )+" Bytes",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    EGP:egpText(LAST_I,"The maximum size for the new partition is "+CurSz+" Bytes",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    EGP:egpText(LAST_I,"Create partition of size (in Bytes): ",vec2(20,Y))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
    
    GpuData[5,number] = 0
    GpuData[6,number] = 1
    
    EGP:egpBox(LAST_I,vec2(280,Y),vec2(90,18))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
    GpuData[7,array] = array(LAST_I,CurSz:toString())
    EGP:egpText(LAST_I,CurSz+"_",vec2(285,Y))
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ Y+=30

    if (FS==2) {    
        GpuData[6,number] = 3
        
        EGP:egpText(LAST_I,"The minimum cluster size for the new partition is 32 Bytes",vec2(20,Y))
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        EGP:egpText(LAST_I,"The maximum cluster size for the new partition is "+256*1024+" Bytes",vec2(20,Y))
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        EGP:egpText(LAST_I,"Create partition of size (in Bytes): ",vec2(20,Y))
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
        
        EGP:egpBox(LAST_I,vec2(280,Y),vec2(90,18))
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
        GpuData[8,array] = array(LAST_I,"256")
        EGP:egpText(LAST_I,"256",vec2(285,Y))
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ Y+=30
        
        EGP:egpText(LAST_I,"Partition label: ",vec2(20,Y))
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
        
        EGP:egpBox(LAST_I,vec2(140,Y),vec2(160,18))
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
        GpuData[9,array] = array(LAST_I,"System")
        EGP:egpText(LAST_I,"System",vec2(145,Y))
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ Y+=30
    }
    
    LAST_Y = Y
    
    installfooter("ENTER=Create    F1=Cancel")
    
    } elseif (Step=="format_check") {
        local FS = FS_TYPES[GpuData[2,number],string]
        local Str = FS
        local HDDInfo = GpuData[3,table]
        local D1_V = GpuData[7,array][2,string]:toNumber()/HDDInfo["sector_size",number]
        local D2_V = GpuData[8,array][2,string]:toNumber()/HDDInfo["sector_size",number]

        dsSendDirect("fs_mkfs_check",HDD_IO:entity(),table(entity(),Str,array(D1_V,D2_V)))
    } elseif (Step=="format_check_post") {
    
    local FS = GpuData[2,number]
    local Str = FS_TYPES[FS,string]
    local HDDInfo = GpuData[3,table]
    local IndArr = GpuData[4,array]
    local CurSz = IndArr[4,number]
        
    local Y = LAST_Y
    local D1_V = GpuData[7,array][2,string]:toNumber()
    local D2_V = GpuData[8,array][2,string]:toNumber()
    local D3_V = GpuData[9,array][2,string]
    
    local ERR = 0
    
    local LAST_I_BAK = LAST_I
    local LASTP_I = GpuData[10,number]
    if (LASTP_I>0) {
        for(I=LAST_I,LASTP_I) {
            EGP:egpRemove(I)   
        }
    }
    
    local Min = (FS==2 ? 512 : 4 )
    if (D1_V<Min) {
        ERR = 1
        EGP:egpText(LAST_I,"ERROR: Minimum size is "+Min+" bytes!",vec2(20,Y))
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    }
    
    if (D1_V>CurSz) {
        ERR = 1
        EGP:egpText(LAST_I,"ERROR: Maximum size is "+CurSz+" bytes!",vec2(20,Y))
        EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
    }
    
    if (FS==2) {
        if (D2_V<32) {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: Minimum cluster size is 32 bytes!",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        }
        
        if (D2_V>256*1024) {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: Maximum cluster size is "+256*1024+" bytes!",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        }
        
        if (D2_V % 8) {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: Cluster size must be be a multiple of 8!",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        }
        
        local Calc = (D1_V/HDDInfo["sector_size",number])/(D2_V/HDDInfo["sector_size",number])
        if (Calc<9) {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: Minimum size is "+9*D2_V+" bytes with cluster size of "+D2_V+"!",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        }
    
        if (D3_V=="") {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: Label can't be empty!",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        }    
    }
    
    if (!ERR) {
        local SERR = Args[2,string]
        if (SERR=="ERR_NOT_IMPLEMENTED") {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: "+Str+" file system is not implemented!",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        } elseif (SERR=="ERR_MINSIZE") {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: failed create file system, too small size for this cluster size!",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        } elseif (SERR=="ERR_MAXCLUSTERSIZE") {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: hit maximum cluster count, cluster size is too small!",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        } elseif (SERR!="") {
            ERR = 1
            EGP:egpText(LAST_I,"ERROR: "+SERR,vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=18
        }
    }

    if (ERR) {
        GpuData[10,number] = LAST_I
        LAST_I = LAST_I_BAK
        Step = "format_opts"
    } else {
        D1_V = floor(D1_V/HDDInfo["sector_size",number])
        D2_V = floor(D2_V/HDDInfo["sector_size",number])
        #dsSendDirect("addfs2tbl",HDD_IO,table(entity(),HDDInfo,IndArr[5,number],array(0,FS,D1_V)))
        
        local Args = table(
            HDDInfo,IOS_FsTbl[IndArr[1,number],table],
            IndArr[5,number],D1_V,D2_V,D3_V
        )
        dsSendDirect("fs_mkfs",HDD_IO:entity(),table(entity(),Str,Args))
        #Step = 3
        #installos(table(5))
        #[

        
        #EGP:egpText(LAST_I,"Please wait while Setup formats the partition",vec2(20,Y))
        #EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
        
        #dsSendDirect("") ]#
    }
    
    } elseif (Step=="format") {
        local First = Args[2,number]
        if (!First) {
            #[local Index = GpuData[5,number]
            local IndexTbl = GpuData[3,table]
            local Item = IndexTbl[Index,array]
            local FName = FS_TYPES[Item[6,number],string]
            local HDDInfo = HDDS[Item[1,number],table]    ]#
            
            local FS = GpuData[2,number]
            local FName = FS_TYPES[FS,string]
            local HDDInfo = GpuData[3,table]
            local Item = GpuData[4,array]  
            #local Index = GpuData[0,number] 
            
            local D1_V = GpuData[7,array][2,string]:toNumber()
            local Sz = D1_V
            
            local SzS = Sz+" Bytes" 
            if (Sz/1024>1) {
                SzS = floor(Sz/1024,2)+" KB"
            }
            
            egpClear()
                        
            GpuData[2,array] = Item
            
            installheader()
            local Y = LAST_Y+60
            
            EGP:egpText(LAST_I,"Please wait while Setup formats the partition",vec2(256,Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
            
            EGP:egpText(LAST_I,"Partition ["+FName+"] "+SzS,vec2(256,Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
            
            local SzH = (HDDInfo["size",number]*HDDInfo["sector_size",number])/1024
            
            EGP:egpText(LAST_I,"on "+SzH+" KB Disk "+(Item[1,number]-1)+" at Id 0 on Bus 0 on atapi [MBR]",vec2(256,Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
            
            EGP:egpBoxOutline(LAST_I,vec2(30,332),vec2(452,100))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            EGP:egpBoxOutline(LAST_I,vec2(34,336),vec2(444,92))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            EGP:egpText(LAST_I,"Setup is formating...",vec2(43,343))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            GpuData[3,number] = LAST_I
            EGP:egpText(LAST_I,"Preparing",vec2(468,343))
            EGP:egpAlign(LAST_I,2)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            GpuData[6,number] = LAST_I
            EGP:egpText(LAST_I,"0%",vec2(256,359))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            EGP:egpBoxOutline(LAST_I,vec2(64,380),vec2(384,30))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++

            GpuData[4,number] = LAST_I
            GpuData[5,number] = 372
            #GpuData[6,number] = 0
            EGP:egpBox(LAST_I,vec2(70,387),vec2(1,16))
            EGP:egpColor(LAST_I,255,255,0,255) LAST_I++
            
            installfooter("")
            timer("installos_format_progress",50)
        } else {
            local TxtI = GpuData[3,number]
            local BarI = GpuData[4,number]
            local MaxSz = GpuData[5,number]
            local Data = HDD_IO["CurTask",table]
            
            if (Data:count()) {
                local Step = Data[1,number]
                local SubStep = Data[2,number]
                local CurStep = Data[3,number]
                local Max = Data[4,number]
                local Cur = Data[5,number]
                local CurPerc = GpuData[6,number]
                
                local Perc = Cur/Max
                local Size = ceil(MaxSz*Perc)
                if (Size % 2) { Size++ }
                
                EGP:egpText(CurPerc,round(Perc*100)+"%",EGP:egpPos(CurPerc))
                
                EGP:egpSize(BarI,vec2(Size,16))
                
                if (Step==1) {             
                    EGP:egpText(TxtI,"Creating FAT"+(CurStep+1)+" table",EGP:egpPos(TxtI))
                } else {
                    EGP:egpText(TxtI,"Creating root directory",EGP:egpPos(TxtI))
                } 
                
                timer("installos_format_progress",50)
            } else {
                DEBUG = 0
                installos(table("pre_hdds"))
            }
            
        }
    } elseif (Step=="install") {
        local First = Args[2,number]
        if (First==0) {
            
            local IndexTbl = GpuData[3,table]
            local Index = GpuData[4,number]
            local Item = IndexTbl[Index,array]
            
            local HDD = HDDS[Item[1,number],table]
            egpClear()
            
            GpuData[2,array] = Item 
            GpuData[3,table] = HDD
            
            installheader()
            local Y = LAST_Y+60
            
            EGP:egpText(LAST_I,"Please wait while Setup copies files",vec2(256,Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
            
            EGP:egpText(LAST_I,"to the installation folders.",vec2(256,Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
            
            EGP:egpText(LAST_I,"This may take several minutes to complete.",vec2(256,Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
            
            EGP:egpBoxOutline(LAST_I,vec2(30,332),vec2(452,100))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            EGP:egpBoxOutline(LAST_I,vec2(34,336),vec2(444,92))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            EGP:egpText(LAST_I,"Setup is copying files...",vec2(43,343))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            GpuData[6,number] = LAST_I
            EGP:egpText(LAST_I,"0%",vec2(256,359))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            EGP:egpBoxOutline(LAST_I,vec2(64,380),vec2(384,30))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++

            GpuData[4,number] = LAST_I
            GpuData[5,number] = 372
            EGP:egpBox(LAST_I,vec2(70,387),vec2(1,16))
            EGP:egpColor(LAST_I,255,255,0,255) LAST_I++
            
            local ID = installfooter("")
            
            #EGP:egpAlign(ID,2)
            local POS = EGP:egpPos(ID):y()
            EGP:egpText(ID,"| Copying: ",vec2(280,POS))     
            
            GpuData[7,number] = LAST_I
            EGP:egpText(LAST_I,"",vec2(365,POS))
            EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ 
            
            dsSendDirect("readfstbl",HDD_IO:entity(),table(entity(),HDD))
        } elseif (First==1) {
            local FsTbl = dsGetTable()
            if (!FsTbl:count()) { DEBUG = 0 installos(table("pre_hdds")) return 0 }
            
            local Item = GpuData[2,array]            
            local HDD = GpuData[3,table]
            
            local CurFs = FsTbl[Item[5,number],table]
            GpuData[8,table] = CurFs    
            
            dsSendDirect("fs_readfs",HDD_IO:entity(),table(entity(),"wm1",table(HDD,CurFs)))
        } elseif (First==2) {    
            local CurFs = dsGetTable()
            
            GpuData[9,table] = CurFs
            
            dsSendDirect("fs_listdir",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,CurFs["root_dir_cluster",number],0)))             
        } elseif (First==3) {
            local ListDir = dsGetTable()
            local CurFs = GpuData[9,table]
            
            local ID = GpuData[7,number]
            EGP:egpText(ID,"boot.ini",EGP:egpPos(ID))
            
            #printTable(ListDir)
            #printTable(CurFs)
            
            for(I=0,ListDir:count()-1) {
                local Entry = ListDir[I,table]
                local FullName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
                if (FullName=="boot.ini" | FullName=="system") {
                    EGP:egpText(LAST_I,"ERROR: Installed system found, aborted. Press F1 to return.",vec2(256,450))
                    EGP:egpAlign(LAST_I,1)
                    EGP:egpColor(LAST_I,168,0,0,255) LAST_I++
                    
                    GpuData[0,number] = 1
                    return 0
                }
            }
            
            local Root = CurFs["root_dir_cluster",number]
            
            GpuData[10,string] = "boot.ini"
            dsSendDirect("fs_mkfile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,"boot","ini",0,Root)))       
            
        } elseif (First==4) {
            local CurFs = GpuData[9,table]
            local CurFile = GpuData[10,string]
            local IsWrite = GpuData[11,number]
            local Ret = dsGetTable()
            local C = Ret["cluster",number]
            local Sd = Ret["data_sector",number]
            
            local TotalFiles = 7
            local CurFiles = GpuData[13,number]
                
            local NL = toChar(10)
            
            if (CurFile=="boot.ini") {
                if (C>0) {
                    CurFiles++
                    GpuData[11,number] = 1
                    GpuData[10,string] = "system"
                    local Str = "ALX Wiremod E2 OS"+NL+"/"+CurFs["volume_serial",number]+"/system/kernel.sys"
                    dsSendDirect("fs_writefile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,C,Sd,Str)))   
                }
            } elseif (CurFile=="system") {
                if (IsWrite) {
                    local Root = CurFs["root_dir_cluster",number]
                    GpuData[11,number] = 0
                    dsSendDirect("fs_mkfile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,"system","",1,Root)))
                } elseif (C>0) {
                    CurFiles++
                    GpuData[12,number] = C
                    GpuData[11,number] = 0
                    GpuData[10,string] = "kernel.sys"
                    dsSendDirect("fs_mkfile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,"kernel","sys",0,C)))
                }
            } elseif (CurFile=="kernel.sys") {
                if (IsWrite) {
                    CurFiles++
                    local SysDir = GpuData[12,number]
                    GpuData[11,number] = 0
                    GpuData[10,string] = "cdburner.e2e"
                    dsSendDirect("fs_mkfile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,"cdburner","e2e",0,SysDir)))
                } elseif (C>0) {
                    GpuData[11,number] = 1
                    local Str = "alxos_init"
                    dsSendDirect("fs_writefile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,C,Sd,Str))) 
                }
            } elseif (CurFile=="cdburner.e2e") {
                if (IsWrite) {
                    CurFiles++
                    local SysDir = GpuData[12,number]
                    GpuData[11,number] = 0
                    GpuData[10,string] = "explorer.e2e"
                    dsSendDirect("fs_mkfile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,"explorer","e2e",0,SysDir)))
                } elseif (C>0) {
                    GpuData[11,number] = 1
                    local Str = "alxos_cd_burner"
                    dsSendDirect("fs_writefile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,C,Sd,Str))) 
                }
            } elseif (CurFile=="explorer.e2e") {
                if (IsWrite) {   
                    CurFiles++               
                    local Item = GpuData[2,array]
                    local HDD = GpuData[3,table]
                    
                    GpuData[11,number] = 0
                    GpuData[10,string] = "| Create boot loader"
                    
                    local ID = GpuData[7,number]
                    EGP:egpText(ID,"",EGP:egpPos(ID))
                    GpuData[7,number] = ID-1
                    dsSendDirect("activefstbl",HDD_IO:entity(),table(entity(),HDD,Item[5,number]))
                } elseif (C>0) {
                    GpuData[11,number] = 1
                    local Str = "alxos_explorer"
                    dsSendDirect("fs_writefile",HDD_IO:entity(),table(entity(),"wm1",table(CurFs,C,Sd,Str))) 
                }
            } elseif (CurFile=="| Create boot loader") {
                CurFiles++
                if (IsWrite) {
                    runCmd("installos",250,table("reboot"))
                } else {
                    GpuData[11,number] = 1 
                
                    local Item = GpuData[2,array]
                    local HDD = GpuData[3,table]
                    local CurFs = GpuData[8,table]
                                    
                    dsSendDirect("fs_mkboot",HDD_IO:entity(),table(entity(),"wm1",table(HDD,CurFs,"alxos_boot")))
                    for (I=1,HDD_MAX) {
                        local HDDInfo = HDDS[I,table]
                        if (HDD==HDDInfo) {
                            dsSendDirect("setboothdd",BIOS,I)
                            break
                        }
                    }
                } 
            }
            
            local Max = TotalFiles
            local Cur = CurFiles
            local CurPerc = GpuData[6,number]
            
            local BarI = GpuData[4,number]
            local MaxSz = GpuData[5,number]
            
            local Perc = Cur/Max
            local Size = ceil(MaxSz*Perc)
            if (Size % 2) { Size++ }
            if (Size==0) { Size = 1 }
            
            EGP:egpText(CurPerc,round(Perc*100)+"%",EGP:egpPos(CurPerc))
            
            EGP:egpSize(BarI,vec2(Size,16))
            
            local ID = GpuData[7,number]
            EGP:egpText(ID,GpuData[10,string],EGP:egpPos(ID))
            
            GpuData[13,number] = CurFiles            
        }
    } elseif (Step=="reboot") {
        local First = GpuData[2,number]
        if (!First) {
            hddload(0) # wtf fix 
            egpClear()
            installheader()
            
            local Y = LAST_Y
            EGP:egpText(LAST_I,"Setup has completed successfully.",vec2(20,Y))
            EGP:egpColor(LAST_I,255,255,255,255) LAST_I++ Y+=30
            
            EGP:egpText(LAST_I,"If there is floppy disk in drive A:, remove it.",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++ Y+=30
            
            EGP:egpText(LAST_I,"To restart your computer, press ENTER.",vec2(20,Y))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            EGP:egpBoxOutline(LAST_I,vec2(30,332),vec2(452,100))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            EGP:egpBoxOutline(LAST_I,vec2(34,336),vec2(444,92))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            GpuData[2,number] = 1
            GpuData[3,number] = LAST_I
            GpuData[4,number] = 1
            EGP:egpText(LAST_I,"Your computer will reboot in 15 seconds...",vec2(256,359))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            EGP:egpBoxOutline(LAST_I,vec2(64,380),vec2(384,30))
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            
            GpuData[5,number] = LAST_I
            GpuData[6,number] = 372
            EGP:egpBox(LAST_I,vec2(70,387),vec2(1,16))
            EGP:egpColor(LAST_I,255,0,0,255) LAST_I++
            
            installfooter("ENTER=Restart Computer")        
        } else {
            local Cur = GpuData[4,number]
            if (Cur<15) {
                GpuData[4,number] = Cur+1
                local ID = GpuData[3,number]
                EGP:egpText(ID,"Your computer will reboot in "+(15-Cur)+" seconds...",EGP:egpPos(ID))
                
                local BarI = GpuData[5,number]
                local MaxSz = GpuData[6,number]
                local Max = 15
                
                local Perc = Cur/Max
                local Size = ceil(MaxSz*Perc)
                if (Size % 2) { Size++ }
                if (Size==0) { Size = 1 }
                
                EGP:egpSize(BarI,vec2(Size,16))
                
            } else {
                KeyHandler = ""
                reboot()
                return 0
            }
        }
        runCmd("install_reboot",1000)
    }
    
    GpuData[1,string] = Step
    return 0
}

function install_reboot() {
    installos(table("reboot"))   
}

function installos_key(Key:string,Pressed) {
    if (!Pressed) { return }
    if (Key=="f3" & Pressed) {
        #EGP:egpClear()
        #LAST_I = 0    
        #BIOS_INIT = 0
        KeyHandler = ""
        dsSendDirect("SHUTDOWN",BIOS,0)
    } else {
        local Step = GpuData[1,string]
        if (Step=="welcome") {
            if (Key=="enter") { installos(table("pre_hdds")) }
        } elseif (Step=="hdds") {
            local IndexTbl = GpuData[3,table]
            local Index = GpuData[4,number]
            local Footer = IndexTbl[Index,array][6,number]
            if (Key=="enter" & Footer==2) {
                installos(table("install"))
            } elseif (Key=="c" & !Footer) {  
                installos(table("pre_format")) 
            } elseif (Key=="d" & Footer) {
                #installos(table(8))
                local Item = IndexTbl[Index,array]
                local HDD = HDDS[Item[1,number],table]
                dsSendDirect("removefstbl",HDD_IO:entity(),table(HDD,Item[5,number]))
                installos(table("pre_hdds",Index))
            } elseif (Key=="f") {
                local HDD = HDDS[IndexTbl[Index,array][1,number],table]
                dsSendDirect("formatdisk",HDD_IO:entity(),HDD)
                #FsTbl = table()
                installos(table("pre_hdds"))
            } if (Key=="down" | Key=="up") {
                local Ind = Index
                local Max = IndexTbl:count()
                if (Max<2) { return }
                if (Key=="down") {
                    if (Index==Max) { return } # cost of scroll
                    Index = (Index==Max ? 1 : Index+1)
                } else {
                    if (Index==1) { return } # cost of scroll
                    Index = (Index==1 ? Max : Index-1)
                }
                GpuData[4,number] = Index
                local BOXID = GpuData[2,number]
                local Item = IndexTbl[Index,array]
                local Y = Item[3,number]
                local ID = Item[2,number]
                EGP:egpColor(ID,0,0,168,255)
                EGP:egpColor(ID+1,0,0,168,255)
                local PID = IndexTbl[Ind,array][2,number]
                EGP:egpColor(PID,168,168,168,255)
                EGP:egpColor(PID+1,168,168,168,255)
                
                local LAST_Y = GpuData[-2,number]
                local Cpos = EGP:egpPos(ID)
                local Max = GpuData[-5,number]
                if (Cpos[2]>LAST_Y+240) {
                    local Parent = GpuData[-1,number]
                    EGP:egpPos(Parent,EGP:egpPos(Parent)-vec2(0,240))
                    GpuData[-2,number] = LAST_Y+240
                    LAST_Y = GpuData[-2,number]

                    for(I=BOXID+1,Max) {
                        local POS = EGP:egpPos(I)
                        if (POS[2]<LAST_Y & POS[1]>-512) {
                            EGP:egpPos(I,EGP:egpPos(I)-vec2(1024,0))
                        } elseif (POS[1]<-512) {
                            EGP:egpPos(I,EGP:egpPos(I)+vec2(1024,0))
                        }
                    }  
                } elseif (Cpos[1]<-512) {
                    local Parent = GpuData[-1,number]
                    EGP:egpPos(Parent,EGP:egpPos(Parent)+vec2(0,240))
                    GpuData[-2,number] = LAST_Y-240
                    LAST_Y = GpuData[-2,number]

                    for(I=BOXID+1,Max) {
                        local POS = EGP:egpPos(I)
                        if (POS[2]>LAST_Y & POS[1]<-512) {
                            EGP:egpPos(I,EGP:egpPos(I)+vec2(1024,0))
                        } elseif (POS[1]>-512) {
                            EGP:egpPos(I,EGP:egpPos(I)-vec2(1024,0))
                        }
                    }
                }
                
                # FUCK this code, don't want thing how to do it correct            
                    #[local Parent = GpuData[-1,number]
                    EGP:egpPos(Parent,EGP:egpPos(Parent)-vec2(0,20))
                    
                    for(I=BOXID+1,LAST_I-1) {
                        local POS = EGP:egpPos(I)
                        if (POS[2]<LAST_Y+20) {
                            EGP:egpPos(I,EGP:egpPos(I)-vec2(1024,0))
                        } else {
                            break
                        }
                    }
                    
                    EGP:egpPos(ID,EGP:egpPos(ID)+vec2(1024,0))
                    EGP:egpPos(ID+1,EGP:egpPos(ID+1)+vec2(1024,0))
                    GpuData[-2,number] = LAST_Y+20
                } elseif (Cpos[1]<-512) {
                    local Parent = GpuData[-1,number]
                    EGP:egpPos(Parent,EGP:egpPos(Parent)+vec2(0,20))
                    #[
                    for(I=BOXID+1,LAST_I-1) {
                        local POS = EGP:egpPos(I)
                        if (POS[2]<LAST_Y) {
                            EGP:egpPos(I,EGP:egpPos(I)-vec2(1024,0))
                        } else {
                            break
                        }
                    }]
                    
                    EGP:egpPos(ID,EGP:egpPos(ID)+vec2(1024,0))
                    EGP:egpPos(ID+1,EGP:egpPos(ID+1)+vec2(1024,0)) 
                    GpuData[-2,number] = LAST_Y-20
                }                
                #[ elseif (Index==1 & Ind==Max) {
                    local Parent = GpuData[-1,number]
                    LAST_Y = GpuData[-3,number]
                    GpuData[-2,number] = LAST_Y
                    EGP:egpPos(Parent,GpuData[-4,vector2])
                    for(I=BOXID+1,LAST_I-1) {
                        local POS = EGP:egpPos(I)
                        if (POS[1]<0 & POS[2]<LAST_Y+240) {
                            EGP:egpPos(I,EGP:egpPos(I)+vec2(1024,0))
                        } elseif (POS[1]>0 & POS[2]>LAST_Y+240) {
                            EGP:egpPos(I,EGP:egpPos(I)-vec2(1024,0))
                        }
                    }
                } ]#
                EGP:egpPos(BOXID,EGP:egpPos(ID)-vec2(20,0))
                local Footer = Item[6,number]
                local FooterID = GpuData[5,number]
                local FooterStr = "C=Create Partition    F=Format Disk    F3=Quit"
                if (Footer==2) {
                    FooterStr = "ENTER=Install    D=Delete Partition    F=Format Disk    F3=Quit"
                } elseif(Footer) {
                    FooterStr = "D=Delete Partition    F=Format Disk    F3=Quit"
                }
                EGP:egpText(FooterID,FooterStr,EGP:egpPos(FooterID))
            }
        } elseif (Step=="pre_format") {
            if (Key=="f1") { installos(table("pre_hdds")) return }
            elseif (Key=="enter") { installos(table("format_key")) return }
            local Index = GpuData[4,number]
            local Max = GpuData[5,number]-1
            if (Key=="down" | Key=="up") {
                local Ind = Index
                if (Key=="down") {
                    Index = (Index==Max ? 0 : Index+1)
                } else {
                    Index = (Index==0 ? Max : Index-1)
                }
                GpuData[4,number] = Index
                local ID = GpuData[2,number]
                local POS = GpuData[3,vector2]
                EGP:egpPos(ID,POS+vec2(0,Index*20))
                EGP:egpColor(ID+Ind+1,168,168,168,255)
                EGP:egpColor(ID+Index+1,0,0,168,255)
            }
        } elseif (Step=="format_opts") {
            if (Key=="f1") { installos(table("pre_hdds")) return }
            elseif (Key=="enter") { installos(table("format_check")) return }
            local Index = GpuData[5,number]
            if (Key=="down" | Key=="up") {
                local Max = GpuData[6,number]-1
                if (Max<1) { return }
                if (Key=="down") {
                    Index = (Index==Max ? 0 : Index+1)
                } else {
                    Index = (Index==0 ? Max : Index-1)
                }
                GpuData[5,number] = Index
                local D1 = GpuData[7,array]
                local D2 = GpuData[8,array]
                local D3 = GpuData[9,array]
                EGP:egpText(D1[1,number],D1[2,string]+(Index==0 ? "_" : ""),EGP:egpPos(D1[1,number]))
                EGP:egpText(D2[1,number],D2[2,string]+(Index==1 ? "_" : ""),EGP:egpPos(D2[1,number]))
                EGP:egpText(D3[1,number],D3[2,string]+(Index==2 ? "_" : ""),EGP:egpPos(D3[1,number]))
            } else {
                local D = GpuData[Index+7,array]
                local D_I = D[1,number]
                local D_V = D[2,string]
                if (Key=="backspace") {
                    D_V = D_V:sub(0,D_V:length()-1)
                    EGP:egpText(D_I,D_V+"_",EGP:egpPos(D_I))
                    #GpuData[Index+2,array] = array(D_I,D_V)
                    D[2,string] = D_V
                } else {
                    local KMem = Keyboard["Memory",number] # handle capital/small without writting own code
                    local Char = toChar((KMem>=128 ? KMem-80 : KMem))
                    if (Char:findRE("^[0-9]$") | Index==2 & Char:findRE("^[A-Za-z0-9_ -]$") & KMem<=122) {
                        D_V = (D_V+Char):left((Index==2 ? 16 : 7))
                        EGP:egpText(D_I,D_V+"_",EGP:egpPos(D_I))
                        D[2,string] = D_V
                    }
                }
                #[ elseif (Key>=48 & Key <=57 | Key>=128 & Key<=137 | Index==2 & (Key>=65 & Key<=122 | in_array(array(45,32,35),Key))) {
                    local Char = toChar((Key>=128 ? Key-80 : Key))
                    D_V = (D_V+Char):left((Index==2 ? 16 : 7))
                    EGP:egpText(D_I,D_V+"_",EGP:egpPos(D_I))
                    D[2,string] = D_V
                    #GpuData[Index+2,array] = array(D_I,D_V)
                }]#
            }
        } elseif (Step=="install") {
            local Abort = GpuData[0,number]
            if (Abort) {
                if (Key=="f1") {
                    DEBUG = 0
                    installos(table("pre_hdds"))   
                }   
            } 
        } elseif (Step=="reboot") {
            if (Key=="enter") {
                KeyHandler = ""
                dsSendDirect("REBOOT",BIOS,0)
            }
        }
    }
}

function installos_ds(Name:string) {
    if (Name:left(3)=="fs_") {
        local FName = Name:sub(4) 
        if (FName=="mkfs_check") {
            local Err = dsGetString()
            installos(table("format_check_post",Err))
        } elseif (FName=="mkfs") {
            local Ret = dsGetNumber()
            if (Ret==2) {
                installos(table("format"))
            } else {
                installos(table("pre_hdds"))
            }
        } elseif(FName=="readfs") {
            installos(table("install",2))
        } elseif(FName=="listdir") {
            installos(table("install",3))
        } elseif(FName=="mkfile" | FName=="writefile" | FName=="mkboot") {
            installos(table("install",4))
        }
    } elseif(Name=="addfs2tbl") {
        #local Tbl = dsGetTable()
        #FsTbl = Tbl[1,table]
        installos(table("pre_hdds"))
    } elseif(Name=="hddfstbl") {
        installos(table("hdds"))
    } elseif(Name=="readfstbl") {
        installos(table("install",1))
    } elseif(Name=="activefstbl") {
        installos(table("install",4))
    }
}

function installos_format() {
    local Name = clkName()
    if (Name=="installos") {
        if (!checkPerf(8000)) {
            timer("installos",33)   
            return
        }
        installos(IO_Tmp)
        IO_Tmp = table()
    } else {
        installos(table("format",1))
    }
}

registerTimers("installos_format_progress","installos_format")
   
}

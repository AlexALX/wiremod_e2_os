@name explorer.e2e
@persist ExplorerFS:table ExplorerAllFs:table ExplorerDir:table ExplorerPath:table ExplorerFile:string
@persist ExplorerKeyH:string ExplorerDsH:string ExplorerCopy:table ExplorerCurTask:string

#[
	ALX Wiremod E2 OS
	Created by AlexALX
	-------------------
	Explorer GUI
]#

#include "alx_pc/gpu/alxos/_main_"

function alxos_explorer_bg() {
    EGP:egpBox(LAST_I,vec2(0,0),vec2(512,472))
    EGP:egpColor(LAST_I,0,0,168,255) LAST_I++
    
    EGP:egpBoxOutline(LAST_I,vec2(2,2),vec2(508,468))
    EGP:egpColor(LAST_I,85,255,255,255) LAST_I++
    
    EGP:egpBoxOutline(LAST_I,vec2(5,5),vec2(502,462))
    EGP:egpColor(LAST_I,85,255,255,255) LAST_I++
    
    LAST_Y=8
}

function alxos_explorer_ft(Opts:array) {
    local LAST_X = 5
    local Quit = 0
    
    local ReDraw = GpuData[-100,number]
    if (!ReDraw) { GpuData[-100,number] = LAST_I }
    GpuData[-103,array] = Opts

    for(I=1,8) {
        # quit always last
        if (I<8 & Opts[I,string]=="Quit") { 
            Opts[8,string] = Opts[I,string] 
            Opts[I,string] = ""
        }
        if (ReDraw) {
            local ID = ReDraw+(I-1)*3+2
            EGP:egpText(ID,Opts[I,string],EGP:egpPos(ID))
        } else {
            EGP:egpText(LAST_I,I:toString(),vec2(LAST_X,495))
            EGP:egpSize(LAST_I,14)
            EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
            LAST_X += 12
            
            EGP:egpBox(LAST_I,vec2(LAST_X,492),vec2(47,20))
            EGP:egpColor(LAST_I,0,168,168,255) LAST_I++
            LAST_X += 2
            
            EGP:egpText(LAST_I,Opts[I,string],vec2(LAST_X,495))
            EGP:egpSize(LAST_I,14)
            EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
            LAST_X += 50
        }
    }      
    
    if (ReDraw) { return }     
    
    EGP:egpText(LAST_I,ExplorerPath:concat("/")+"/"+ExplorerFile,vec2(5,472))
    EGP:egpColor(LAST_I,168,168,168,255) LAST_I++
}

function alxos_explorer_label(Label:string) {
    local PosX = Label:length()*10+10
    
    EGP:egpBox(LAST_I,vec2(256-(PosX/2),450),vec2(PosX,22))
    EGP:egpColor(LAST_I,0,0,168,255) LAST_I++
    
    EGP:egpText(LAST_I,Label,vec2(256,452))
    EGP:egpFont(LAST_I,"Courier New")
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,255,255,255,255) LAST_I++   
}

function number alxos_explorer_listdir_draw(Info:table) {
    
    local CmdRun = GpuData[-5,number]
    
    if (CmdRun==0) {
        
        ExplorerDir[3,table] = Info
        ExplorerCurTask = "listdir"
        
        if (Info:count()<=1) {
            
            local Err = Info[1,string]
            
            if (Err!="" & Err!="OK") {
                local Arr = Err:explode(NL)
                EGP:egpRemove(LAST_I)                
                for (I=1,Arr:count()) {
                    EGP:egpText(LAST_I,Arr[I,string],vec2(12,LAST_Y))
                    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 20
                }
            } else {
            
                EGP:egpSetText(LAST_I,"Directory is empty.") LAST_I++
            
            }
            ExplorerKeyH = "listdir"
            KeyHandler = "alxos_explorer_key"
            return 0  
        }
        
        # selector
        GpuData[1,number] = LAST_I
        EGP:egpBox(LAST_I,vec2(7,28),vec2(498,20))
        EGP:egpColor(LAST_I,0,168,168,255) LAST_I++

        GpuData[2,table] = Info
        GpuData[6,table] = table()
        GpuData[8,number] = 1
        
        GpuData[-5,number] = 1
        runCmd("alxos_explorer_listdir_draw",1,Info) 
        return 1
    
    } elseif (CmdRun==1) {
    
        local Entries = GpuData[6,table]
        local EntryID = GpuData[8,number]
        
        # folders first
        local Max = Info:count()-1
        local I = GpuData[9,number]
        local TotalDirs = GpuData[3,number]
        while(perf()) {
            if (I>Max) { 
                break    
            }
            local Entry = Info[I,table]
            I++
            if (Entry["name",string]=="." | !alxos_wm1_isdir(Entry)) { continue }
            
            local Col = vec4(128,255,255,255)
            if (EntryID==1) {
                Col = vec4(0,0,0,255) 
            }
            
            Entries[EntryID,table] = table(LAST_Y,LAST_I,Entry)
            EntryID++
            
            EGP:egpText(LAST_I,Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : ""),vec2(12,LAST_Y))
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            local UP_DIR = (Entry["name",string]==".." ? 1 : 0)
            
            EGP:egpText(LAST_I,(UP_DIR ? "UP-DIR" : "SUB-DIR"),vec2(175,LAST_Y))
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            local Date = Entry["time_create",number]
            local DateStr = alxos_wm1_date(Date)
            if (UP_DIR) { DateStr = "---" }
            EGP:egpText(LAST_I,DateStr,vec2(300,LAST_Y))
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            local DateStr = alxos_wm1_time(Date)
            if (UP_DIR) { DateStr = "---" }
            EGP:egpText(LAST_I,DateStr,vec2(425,LAST_Y))
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            LAST_Y += 20
            TotalDirs++ 
        }  
        GpuData[3,number] = TotalDirs
        GpuData[8,number] = EntryID
        GpuData[6,table] = Entries 
        
        if (I<=Max) { 
            GpuData[9,number] = I
        } else {
            GpuData[-5,number] = 2
            GpuData[4,number] = 0
            GpuData[10,number] = 0
            GpuData[9,number] = 0
        }
        
        runCmd("alxos_explorer_listdir_draw",1,Info) 
        return 1

    } else {
        # files
        local Entries = GpuData[6,table]
        local EntryID = GpuData[8,number]
        
        local Max = Info:count()-1
        local I = GpuData[9,number]
        local TotalFiles = GpuData[4,number]
        local TotalSize = GpuData[10,number]
        while(perf()) {
            if (I>Max) { 
                break    
            }
            local Entry = Info[I,table]
            I++
            if (alxos_wm1_isdir(Entry)) { continue }
            
            local Col = vec4(128,255,255,255)
            if (EntryID==1) {
                Col = vec4(0,0,0,255) 
            }
            
            Entries[EntryID,table] = table(LAST_Y,LAST_I,Entry)
            EntryID++
            
            EGP:egpText(LAST_I,Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : ""),vec2(12,LAST_Y))
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            EGP:egpText(LAST_I,alxos_nicesize(Entry["size",number]),vec2(175,LAST_Y))
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            local Date = Entry["time_create",number]
            local DateStr = alxos_wm1_date(Date)
            EGP:egpText(LAST_I,DateStr,vec2(300,LAST_Y))
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            local DateStr = alxos_wm1_time(Date)
            EGP:egpText(LAST_I,DateStr,vec2(425,LAST_Y))
            EGP:egpColor(LAST_I,Col) LAST_I++
            
            LAST_Y += 20 
            TotalFiles++
            TotalSize += Entry["size",number]
        }
        
        GpuData[8,number] = EntryID
        GpuData[6,table] = Entries 
        GpuData[4,number] = TotalFiles
        GpuData[5,number] = TotalSize
        
        if (I<=Max) { 
            GpuData[9,number] = I
            runCmd("alxos_explorer_listdir_draw",1,Info) 
            return 1
        } else {
            GpuData[8,number] = EntryID-1
            GpuData[7,number] = 1
        }
    
    }
    
    ExplorerKeyH = "listdir"
    KeyHandler = "alxos_explorer_key"
    return 0
}

function alxos_explorer_listdir(FS:table,Dir,Sd) {
    local Err = GpuData[100,string]
    ExplorerDsH = ""
    ExplorerCurTask = ""
    egpClear()
    alxos_explorer_bg()
    ExplorerDir[1,number] = Dir
    ExplorerDir[2,number] = Sd
    
    EGP:egpText(LAST_I,"Name",vec2(50,LAST_Y))
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++
    
    EGP:egpBox(LAST_I,vec2(170,7),vec2(1,458))
    EGP:egpColor(LAST_I,85,255,255,255) LAST_I++
    
    EGP:egpText(LAST_I,"Size",vec2(210,LAST_Y))
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++
    
    EGP:egpBox(LAST_I,vec2(295,7),vec2(1,458))
    EGP:egpColor(LAST_I,85,255,255,255) LAST_I++
    
    EGP:egpText(LAST_I,"Date",vec2(335,LAST_Y))
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++
    
    EGP:egpBox(LAST_I,vec2(420,7),vec2(1,458))
    EGP:egpColor(LAST_I,85,255,255,255) LAST_I++
    
    EGP:egpText(LAST_I,"Time",vec2(450,LAST_Y))
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++
    
    alxos_explorer_label("[ "+ExplorerFS["volume_name",string]+" ]")
    
    LAST_Y += 20
    
    GpuData[9,number] = 0
    
    if (Err=="") {
        ExplorerFile = ""
        dsSendDirect("fs_listdir",FS["hdd_io",wirelink]:entity(),table(entity(),FS["fs_str_id",string],table(FS,Dir,Sd)))
    }
    
    ExplorerKeyH = ""
    KeyHandler = ""
    local F7 = (FS["read_only",number] ? "Refresh" : "Delete" )
    alxos_explorer_ft(array("Info","Menu","Open","View","MkDir","MkFile",F7,"Quit"))
    
    if (Err!="") {
        local Arr = Err:explode(NL)
        for (I=1,Arr:count()) {
            EGP:egpText(LAST_I,Arr[I,string],vec2(12,LAST_Y))
            EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 20
        }
        
        ExplorerKeyH = "listdir"
        KeyHandler = "alxos_explorer_key"
    } else {
        EGP:egpText(LAST_I,"Loading...",vec2(12,LAST_Y))
        EGP:egpColor(LAST_I,128,255,255,255)
    }
    
}

function alxos_explorer_handlers() {
    DsHandler = "alxos_explorer_ds"  
    KeyHandler = "alxos_explorer_key"
    PlugHandler = "alxos_explorer_onplug"
}

function alxos_explorer_listcurdir() {
    alxos_explorer_listdir(ExplorerFS,ExplorerDir[1,number],ExplorerDir[2,number])     
}

function alxos_explorer_info() {
    local Info = GpuData
    egpClear()    
    alxos_explorer_bg()
    
    ExplorerCurTask = "info"
    
    EGP:egpText(LAST_I,"The ALX Wiremod E2 OS Explorer",vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++ LAST_Y += 20
    
    EGP:egpText(LAST_I,"Version 1.2, 17 March 2018",vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25
    
    EGP:egpLine(LAST_I,vec2(8,LAST_Y),vec2(504,LAST_Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 5
    
    local Sz = ExplorerFS["total_clusters",number]*ExplorerFS["sectors_in_cluster",number]*ExplorerFS["bytes_in_sector",number]
    if (ExplorerFS["fs_str_id",string]=="WCD") {
        Sz = ExplorerFS["total_sectors",number]*ExplorerFS["bytes_in_sector",number]  
    }
    EGP:egpText(LAST_I,alxos_nicesize(Sz)+" total space on drive "+ExplorerPath[1,string],vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 20
    
    local Sz = ExplorerFS["free_clusters",number]*ExplorerFS["sectors_in_cluster",number]*ExplorerFS["bytes_in_sector",number]
    EGP:egpText(LAST_I,alxos_nicesize(Sz)+" free on drive "+ExplorerPath[1,string],vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 20
    
    EGP:egpText(LAST_I,Info[4,number]+" files and "+Info[3,number]+" directories ",vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 20
    
    EGP:egpText(LAST_I,"use "+alxos_nicesize(Info[5,number])+" in",vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 20
    
    EGP:egpText(LAST_I,ExplorerPath:concat("/"),vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25
    
    EGP:egpLine(LAST_I,vec2(8,LAST_Y),vec2(504,LAST_Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 5
    
    EGP:egpText(LAST_I,"Volume Label: "+ExplorerFS["volume_name",string],vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 20
    
    EGP:egpText(LAST_I,"Serial number: "+ExplorerFS["volume_serial",number],vec2(256,LAST_Y))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25
    
    if (ExplorerFS["fs_str_id",string]=="WCD") {
        EGP:egpLine(LAST_I,vec2(8,LAST_Y),vec2(504,LAST_Y))
        EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 5
        
        local CurDisk = ExplorerFS["hddinfo",table]["wirelink",wirelink]["CurDiskInfo",table][0,table]
        local Type = (CurDisk["type",string]!="" ? CurDisk["type",string] : "No Disc")
        EGP:egpText(LAST_I,"Disc type: "+Type,vec2(256,LAST_Y))
        EGP:egpAlign(LAST_I,1)
        EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25
        
        if (Type!="No Disc") {
            local BookTypes = ExplorerFS["hddinfo",table]["book_types",array]
            
            EGP:egpText(LAST_I,"Book type: "+BookTypes[ExplorerFS["book_type",number],string],vec2(256,LAST_Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25
            
            EGP:egpText(LAST_I,"Max speed: "+CurDisk["max_speed",number]/100+"x",vec2(256,LAST_Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25     
            
            EGP:egpText(LAST_I,"Bootable: "+(ExplorerFS["boot_func",string]!="" ? "Yes" : "No"),vec2(256,LAST_Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25    
            
            local Date = ExplorerFS["burn_time",number]
            if (Date>0) {
                local DateStr = alxos_wm1_date(Date)+" "+alxos_wm1_time(Date)
                
                EGP:egpText(LAST_I,"Burn date:",vec2(256,LAST_Y))
                EGP:egpAlign(LAST_I,1)
                EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25 
                
                EGP:egpText(LAST_I,DateStr,vec2(256,LAST_Y))
                EGP:egpAlign(LAST_I,1)
                EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 25 
            }
        }
    }
    
    EGP:egpLine(LAST_I,vec2(8,LAST_Y),vec2(504,LAST_Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 5
    
    EGP:egpLine(LAST_I,vec2(8,437),vec2(504,437))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 5
    
    EGP:egpText(LAST_I,"Created by AlexALX (c) 2016-2018",vec2(256,442))
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++
    
    ExplorerKeyH = "quit"
    alxos_explorer_ft(array("Quit"))    
}

function alxos_explorer_menu(Title:string,MenuTree:table,Width) {
    alxos_menu(Title,MenuTree,Width)

    if (!GpuData[-104,array]:count()) {
        GpuData[-102,string] = ExplorerKeyH
        GpuData[-104,array] = GpuData[-103,array]
    }
    ExplorerKeyH = "mainmenu"
    alxos_explorer_ft(array("Quit"))  
}

function alxos_explorer_closemenu() {
    alxos_closemenu()
    ExplorerKeyH = GpuData[-102,string]
    GpuData[-101,number] = 0
    alxos_explorer_ft(GpuData[-104,array])
    GpuData:removeArray(-104)
    ExplorerCurTask = "listdir"
}

function alxos_explorer_closedialog() {
    alxos_closedialog()
    ExplorerKeyH = GpuData[-102,string]
    GpuData[-101,number] = 0
    alxos_explorer_ft(GpuData[-104,array])
    GpuData:removeArray(-104)
}

function alxos_explorer_mainmenu(Info:table) {
    local Entry = Info[3,table]
    if (Entry["name",string]==".") { return }

    local MenuTree = table(
        table(0,"File Information","alxos_explorer_fileinfo",Info),
        table(0,"Rename file","alxos_explorer_rename",Info),
        table(0,"Copy file","alxos_explorer_copy",Info),
        table(0,"Paste file","alxos_explorer_paste"),
        table(0,"Send file","alxos_explorer_send",Info),
        table(0,"Download file","alxos_explorer_dw",Info),
        table(0,"System Information","alxos_explorer_sysinfo"),
        table(0,"Change volume","alxos_explorer_chvolume"),
        table(0,"Start Sharing Server","alxos_explorer_sharesv"),
        table(0,"Shutdown PC","alxos_explorer_shutdown")
    )    
    local Ind = 4
    if (alxos_wm1_isdir(Entry)) {
        MenuTree:removeTable(6)
        MenuTree:removeTable(5)
        MenuTree:removeTable(3)
        Ind = 3
    }
    if (ExplorerFS["read_only",number] | !ExplorerCopy:count()) {
        MenuTree:removeTable(Ind)
    }
    alxos_explorer_menu("Menu",MenuTree,280)
}

function alxos_explorer_shutdown(Info:table) {
    dsSendDirect("SHUTDOWN",BIOS,0)    
}

function number alxos_explorer_dialog(Title:string,Width,Height,Type:string,Callback:string,Tbl:table) {
    local Parent = alxos_dialog(Title,Width,Height,Type,Callback,Tbl)
    if (!GpuData[-104,array]:count()) {
        GpuData[-102,string] = ExplorerKeyH
        GpuData[-104,array] = GpuData[-103,array]
    }
    
    ExplorerKeyH = "dialog"
    alxos_explorer_ft(array("Quit"))
    return Parent
}

function number alxos_explorer_dialog(Title:string,Width,Height,Type:string,Callback:string) {
    return alxos_explorer_dialog(Title,Width,Height,Type,Callback,table())
}

function alxos_explorer_msg(Msg:string,Width,Title:string,Callback:string) {
    if (GpuData["share_started",number]) {
        if (GpuData["share_mode",number]==1) {
            local Info = GpuData["dialogdata",table]
            if (Callback=="alxos_explorer_listcurdir") { Callback = "alxos_explorer_presendsv" }
        } else {
            GpuData["share_started",number] = 0
            Callback = "alxos_explorer_closedialog"
        }
    }
    local Parent = alxos_explorer_dialog(Title,Width,60,"ok",Callback)
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,Msg,vec2(0,-12))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    DsHandler = "alxos_explorer_ds"
}

function alxos_explorer_msg(Msg:string,Width,Title:string) {
    alxos_explorer_msg(Msg,Width,Title,"alxos_explorer_listcurdir")
}

function alxos_explorer_error(Msg:string,Width,Title:string,Callback:string) {
    alxos_explorer_msg(Msg,Width,Title,Callback)
    dsSendDirect("playgmsound",Devices["spu",entity],table(0,0.2,"buttons/button10.wav"))
}

function alxos_explorer_error(Msg:string,Width,Title:string) {
    alxos_explorer_error(Msg,Width,Title,"alxos_explorer_listcurdir")
}

function alxos_explorer_error(Msg:string,Width) {
    alxos_explorer_error(Msg,Width,"Error","alxos_explorer_listcurdir")
}

function alxos_explorer_error(Msg:string) {
    alxos_explorer_error(Msg,400,"Error","alxos_explorer_listcurdir")   
}

function alxos_explorer_paste_progress() {
    local First = DialogData[1,number]
    if (!First) {
        local Width = 400
        local Height = 80
        
        local Parent = alxos_explorer_dialog("Copying file",Width,Height,"progress","")
        local EntID = DialogData[-10,table]
        EntID:pushNumber(LAST_I)
        DialogData[5,number] = LAST_I
        EGP:egpText(LAST_I,"Reading file, please wait...",vec2(-180,-22))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
        
        DialogData[1,number] = 1
        DialogData[3,number] = 1
        DialogData[4,number] = 1
        runCmd("alxos_explorer_paste_progress",1)
        ExplorerDsH = "alxos_explorer_paste_ds"
        ExplorerKeyH = "stop_progress"
        return
    }
    local FS = ExplorerFS["hdd_io",wirelink]
    local Step = DialogData[4,number]
    if (Step==1) { FS = ExplorerCopy["fs",table]["hdd_io",wirelink] }
    local CurTask = FS["CurTask",table]
    local I = CurTask[2,number]
    local Max = CurTask[1,number]
    local Last = DialogData[3,number]
    
    if (!Step) { return }

    if (Max>0) {
        local PercID = DialogData[-4,number]
        local BoxID = DialogData[-5,number]
        local BoxW = DialogData[-6,number]
        local CalcP = round(I/Max*100)
        BoxW = ceil(BoxW/100*CalcP)
        if (BoxW<1) { BoxW = 1 }
        EGP:egpSize(BoxID,vec2(BoxW,20))
        EGP:egpSetText(PercID,CalcP+"%")
        if (Step!=Last) {
            EGP:egpSetText(DialogData[5,number],"Writing file, please wait...")
            DialogData[3,number] = 2  
        }
    }
    
    runCmd("alxos_explorer_paste_progress",1) 
}

function alxos_explorer_paste(Info:table) {
    alxos_explorer_closemenu()
    if (!ExplorerCopy:count()) { return }
    if (ExplorerFS["read_only",number]) {
        "alxos_explorer_ro"()
        return
    }
    
    local FName = ExplorerCopy["name",string]+(ExplorerCopy["ext",string]!=""?"."+ExplorerCopy["ext",string] : "")
    for(I=0,ExplorerDir[3,table]:count()) {
        local Entry = ExplorerDir[3,table][I,table]
        local FullName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        if (FullName==FName) {
            alxos_explorer_error("Folder or file with this name already exists.",400)
            return 
        }
    }
    
    ExplorerCurTask = "paste"
    local Entry = ExplorerCopy
    dsSendDirect("fs_mkfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry["name",string],Entry["ext",string],0,ExplorerDir[1,number])))
    
    alxos_explorer_paste_progress()
    ExplorerDsH = "alxos_explorer_paste_ds"
}

function alxos_explorer_paste_ds(Args:table) {
    local Type = dsGetType()
    local DS = dsClkName()
    if (DS=="fs_mkfile") {
        local Ret = dsGetTable()
        if (Ret[1,number]!=0) {
            alxos_explorer_error("Failed to create file!",250)
        } else {
            DialogData[6,table] = Ret
            dsSendDirect("fs_rawreadfile",ExplorerCopy["fs",table]["hdd_io",wirelink]:entity(),table(entity(),ExplorerCopy["fs",table]["fs_str_id",string],table(
                ExplorerCopy["fs",table],ExplorerCopy["cluster",number],ExplorerCopy["data_sector",number]
            )))
            return
        }
    } elseif (DS=="fs_rawreadfile") {
        local Data = dsGetArray()
        DialogData[4,number] = 2
        local Entry = DialogData[6,table]
        dsSendDirect("fs_rawwritefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(
            ExplorerFS,Entry["cluster",number],Entry["data_sector",number],Data,ExplorerCopy["size",number]
        )))
        return
    } elseif (DS=="fs_rawwritefile") {
        local Ret = dsGetNumber()
        if (Ret==-2) {
            alxos_explorer_error("Not enough space on disk.",400)
            local Entry = DialogData[6,table]
            dsSendDirect("fs_removefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])))
        } elseif (Ret!=1) {
            alxos_explorer_error("File system internal error.",400)
        } else {
            DialogData[4,number] = 0
            local Parent = alxos_explorer_dialog("Copied",300,60,"ok","alxos_explorer_listcurdir")
            DialogData[-10,table]:pushNumber(LAST_I)
            EGP:egpText(LAST_I,"File successfully copied.",vec2(0,-12))
            EGP:egpParent(LAST_I,Parent)
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
        }
    } else {
        alxos_explorer_error("Failed to copy file!",250)
    }
    DialogData[4,number] = 0
    ExplorerDsH = ""
}

function alxos_explorer_paste_ds() {
    alxos_explorer_paste_ds(table())   
}

function alxos_explorer_copy(Info:table) {
    local Entry = Info[6,table][3,table]  
    alxos_explorer_closemenu()
    local Is_Dir = alxos_wm1_isdir(Entry)
    if (Is_Dir) {
        alxos_explorer_error("You can copy only files.",250)
        return
    }
    local Parent = alxos_explorer_dialog("Copied",250,60,"ok","alxos_explorer_closedialog")
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"File copied to clipboard.",vec2(0,-12))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    ExplorerCopy = Entry:clone()
    ExplorerCopy["fs",table] = ExplorerFS
}

function alxos_explorer_share_svs() {
    local Parent = alxos_explorer_dialog("Searching...",340,60,"none","")
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Please wait while establish connection...",vec2(0,-10))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    dsSendDirect("nwsend",GpuData["nwcontroller",entity],table(GpuData["nwinterface",number],-1,GpuData["share_local",number],"gpu","explorer_share"))
    runCmd("alxos_explorer_sharepost",1000,0)
    GpuData["servers",table] = table()
}

function number alxos_explorer_sharepost() {
    
    if (GpuData["servers",table]:count()) { 
        alxos_explorer_closedialog()
        
        local MenuTree = table()
        
        for (I=1,GpuData["servers",table]:count()) {
            MenuTree:pushTable(table(0,GpuData["servers",table][I,table][1,string],"alxos_explorer_sharecl",GpuData["servers",table]))    
        }
        alxos_explorer_menu("Servers",MenuTree,280)
        
        return 0
    }
    
    local Parent = alxos_explorer_dialog("Failed",360,60,"yesno","alxos_explorer_sharesretry")
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"No servers found. Do you want to retry?",vec2(0,-10))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    return 0
}

function alxos_explorer_sharecl(Args:table) {
    alxos_explorer_closemenu()
    GpuData["server",table] = Args[6,table][1,table]
    dsSendDirect("nwsend",GpuData["nwcontroller",entity],table(GpuData["nwinterface",number],GpuData["server",table][2,number],GpuData["share_local",number],"gpu","explorer_presend",GpuData["dialogdata",table],entity():id()))
    
    local Keys = table()
    Keys["OK",array] = array("Abort",55)
    local Parent = alxos_explorer_dialog("Information",350,70,"ok","alxos_explorer_sharestop",Keys)
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Waiting for confirmation of send request...",vec2(0,-10))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    GpuData["share_started",number] = 1
}


function alxos_explorer_sharename() {
    local RenFile = (DialogData[-5,number]==1 ? 1 : 0 )    
    if (!RenFile) {
        GpuData["share_busy",number] = 0
        
        local Info = GpuData["dialogdata",table]
        
        dsSendDirect("nwsend",GpuData["nwcontroller",entity],
            table(GpuData["nwinterface",number],Info[1,number],GpuData["share_local",number],"gpu","explorer_presend",0,"Request was canceled by server.")
        )
        
        "alxos_explorer_sharesv"()
        return
    }
    
    local FNameT = DialogData[10,table][0,table]
    local FNameF = FNameT[2,string]
    local FName = FNameF
    local FNameE = ""
    if (FNameF:find(".")) {
        FName = FNameF:sub(0,FNameF:find(".")-1)
        FNameE = FNameF:sub(FNameF:find(".")+1,FNameF:length())
    }
    
    if (FNameF=="") {
        alxos_explorer_error("File name cannot be empty.",250)
        return
    }
    
    for(I=0,ExplorerDir[3,table]:count()) {
        local Entry = ExplorerDir[3,table][I,table]
        local FullName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        if (FullName==FNameF) {
            alxos_explorer_error("Folder or file with this name already exists.",400)
            return 
        }
    }
    
    local Parent = alxos_explorer_dialog("Sending file",400,80,"progress","")
    local EntID = DialogData[-10,table]
    EntID:pushNumber(LAST_I)
    DialogData[5,number] = LAST_I
    EGP:egpText(LAST_I,"Receiving file, please wait...",vec2(-180,-22))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    local Info = GpuData["dialogdata",table]
    
    GpuData["share_fname",string] = FName
    GpuData["share_fext",string] = FNameE
    
    GpuData["share_timeout",number] = curtime()+5
    
    dsSendDirect("nwsend",GpuData["nwcontroller",entity],
        table(GpuData["nwinterface",number],Info[1,number],GpuData["share_local",number],"gpu","explorer_presend",1)
    )
}

function alxos_explorer_presendsv(Info:table) {
    if (GpuData["share_busy",number]) {
        dsSendDirect("nwsend",GpuData["nwcontroller",entity],table(GpuData["nwinterface",number],Info[1,number],GpuData["share_local",number],"gpu","explorer_presend",0,"Server is busy."))
    } else {
        GpuData["share_busy",number] = 1
        GpuData["dialogdata",table] = Info
        
        local Entry = Info[6,table][2,table]
        alxos_explorer_closemenu()

        local Parent = alxos_explorer_dialog("Send Request",400,90,"text","alxos_explorer_sharename")
        local Entries = table()
        DialogData[1,table] = Entry
        
        DialogData[-10,table]:pushNumber(LAST_I)
        EGP:egpText(LAST_I,"New send request from #"+Info[7,number]+", file name:",vec2(-180,-24))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
                
        DialogData[-10,table]:pushNumber(LAST_I)
        EGP:egpBox(LAST_I,vec2(-180,-4),vec2(360,20))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,168,168,255) LAST_I++
        
        DialogData[-10,table]:pushNumber(LAST_I)
        local FName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        Entries[0,table] = table(LAST_I,FName,"^[A-Za-z0-9_!@#$^ .-]$",14,"alxos_explorer_fnamefilter")
        EGP:egpText(LAST_I,FName+"_",vec2(-178,-4))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
        
        DialogData[10,table] = Entries
        DialogData[11,number] = 0
        DialogData[12,number] = Entries:count()
        DialogData[13,table] = Info
        
    }
}

function alxos_explorer_presendsv() {
    GpuData["share_busy",number] = 0     
    alxos_explorer_presendsv(DialogData[13,table])
}

function alxos_explorer_sharestop(Msg:string) {
    alxos_explorer_error(Msg,400,"Error","alxos_explorer_sharesv")  
    stopCmd()
}

function alxos_explorer_sharestop(Stop) {
    if (GpuData["share_started",number] & !Stop) {
        if (GpuData["share_mode",number]==0) {
            dsSendDirect("nwsend",GpuData["nwcontroller",entity],
                table(GpuData["nwinterface",number],GpuData["server",table][2,number],GpuData["share_local",number],"gpu","explorer_sharestop","Request was canceled by client.")
            )
        } else {
            dsSendDirect("nwsend",GpuData["nwcontroller",entity],
                table(GpuData["nwinterface",number],GpuData["dialogdata",table][1,number],GpuData["share_local",number],"gpu","explorer_sharestop","Request was canceled by server.")
            )
        }
    }
    GpuData:unset("server")
    GpuData:unset("servers")
    GpuData:unset("share_mode")
    GpuData:unset("share_started")
    stopAllTimers()
    ExplorerCurTask = "listdir"
    alxos_explorer_closedialog()
}

function alxos_explorer_sharestop() {
    alxos_explorer_sharestop(0)    
}

function alxos_explorer_nwsend_progress() {
    local First = DialogData[1,number]
    if (!First) {
        local Width = 400
        local Height = 80
        
        local Parent = alxos_explorer_dialog("Sending file",Width,Height,"progress","")
        local EntID = DialogData[-10,table]
        EntID:pushNumber(LAST_I)
        DialogData[5,number] = LAST_I
        EGP:egpText(LAST_I,"Reading file, please wait...",vec2(-180,-22))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
        
        DialogData[1,number] = 1
        DialogData[3,number] = 1
        DialogData[4,number] = 1
        runCmd("alxos_explorer_nwsend_progress",100,0)
        ExplorerDsH = "alxos_explorer_nwsend_ds"
        ExplorerKeyH = "stop_nwprogress"
        return
    }
    local FS = ExplorerFS["hdd_io",wirelink]
    local Step = DialogData[4,number]
    local CurTask = FS["CurTask",table]
    local I = CurTask[2,number]
    local Max = CurTask[1,number]
    local Last = DialogData[3,number]
    
    if (GpuData["share_mode",number]==0 & curtime()>GpuData["share_timeout",number]) {
        alxos_explorer_sharestop(1)
        alxos_explorer_error("Connection timeout.",200)
        if (CurTask:count()) {
            dsSendDirect("clear",FS:entity(),entity())    
        }
        ExplorerDsH = ""
        return
    }
    
    if (!Step) { return }

    if (Max>0) {
        local PercID = DialogData[-4,number]
        local BoxID = DialogData[-5,number]
        local BoxW = DialogData[-6,number]
        local CalcP = round(I/Max*100)
        BoxW = ceil(BoxW/100*CalcP)
        if (BoxW<1) { BoxW = 1 }
        EGP:egpSize(BoxID,vec2(BoxW,20))
        EGP:egpSetText(PercID,CalcP+"%")
        
        local Client = GpuData["server",table][2,number]
        if (GpuData["share_mode",number]==1) {
            Client = GpuData["dialogdata",table][1,number]   
        }
        
        dsSendDirect("nwsend",GpuData["nwcontroller",entity],
            table(GpuData["nwinterface",number],Client,GpuData["share_local",number],"gpu","explorer_sendprogress",CalcP)
        )
        
        if (Step!=Last) {
            EGP:egpSetText(DialogData[5,number],"Writing file, please wait...")
            DialogData[4,number] = 2  
        }
    }
    
    runCmd("alxos_explorer_nwsend_progress",100,0) 
}

function alxos_explorer_sendprogress(CalcP) {
    local PercID = DialogData[-4,number]
    local BoxID = DialogData[-5,number]
    local BoxW = DialogData[-6,number]
    BoxW = ceil(BoxW/100*CalcP)
    if (BoxW<1) { BoxW = 1 }
    EGP:egpSize(BoxID,vec2(BoxW,20))
    EGP:egpSetText(PercID,CalcP+"%")

    local Client = GpuData["server",table][2,number]
    if (GpuData["share_mode",number]==1) {
        Client = GpuData["dialogdata",table][1,number]   
    }

    dsSendDirect("nwsend",GpuData["nwcontroller",entity],
        table(GpuData["nwinterface",number],Client,GpuData["share_local",number],"gpu","explorer_sendpong")
    )
    
    stopCmd()
    runCmd("alxos_explorer_nwsend_timeout",5000,0)

    local Last = DialogData[3,number]
    local Step = DialogData[4,number]
    if (Step!=Last) {
        EGP:egpSetText(DialogData[5,number],"Writing file, please wait...")
        DialogData[4,number] = 2  
    }
}

function alxos_explorer_nwsend_timeout() {
    alxos_explorer_sharestop(1)
    alxos_explorer_error("Connection timeout.",200)
}

function alxos_explorer_sendfile(Data:array) {
    dsSendDirect("fs_mkfile",ExplorerFS["hdd_io",wirelink]:entity(),
        table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,GpuData["share_fname",string],GpuData["share_fext",string],0,ExplorerDir[1,number]))
    )
    
    DialogData[4,number] = 1
    DialogData[3,number] = 2
    DialogData[1,number] = 1
    GpuData["share_data",array] = Data
    GpuData["share_timeout",number] = curtime()+5
    stopCmd()
    ExplorerCurTask = "sendwrite"
    alxos_explorer_nwsend_progress()
    ExplorerDsH = "alxos_explorer_nwsend_ds"
}

function alxos_explorer_presendcl(Info:table) {
    if (Info[6,number]==2) {
        alxos_explorer_sharestop(1)
        alxos_explorer_msg(Info[7,string],400,"Information")   
        ExplorerDsH = ""
    } elseif (!Info[6,number]) {
        alxos_explorer_error(Info[7,string])    
    } else {
        local Entry = GpuData["dialogdata",table][2,table]
        dsSendDirect("fs_rawreadfile",ExplorerFS["hdd_io",wirelink]:entity(),
            table(entity(),ExplorerFS["fs_str_id",string],
            table(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])
        ))
        ExplorerDsH = "alxos_explorer_nwsend_ds"
        GpuData["share_timeout",number] = curtime()+5
        alxos_explorer_nwsend_progress()
    }
}

function alxos_explorer_nwsend_ds(Args:table) {
    local Type = dsGetType()
    local DS = dsClkName()
    
    if (DS=="fs_rawreadfile") {
        stopCmd()
        local Data = dsGetArray()
        dsSendDirect("nwsend",GpuData["nwcontroller",entity],
            table(GpuData["nwinterface",number],GpuData["server",table][2,number],GpuData["share_local",number],"gpu","explorer_sendfile",Data)
        )
        DialogData[3,number] = 2
        ExplorerDsH = ""
        return
    } elseif (DS=="fs_mkfile") {
        local Ret = dsGetTable()
        if (Ret[1,number]!=0) {
            alxos_explorer_error("Failed to create file!",250)
            ExplorerDsH = ""
        } else {
            DialogData[6,table] = Ret
            dsSendDirect("fs_rawwritefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(
                ExplorerFS,Ret["cluster",number],Ret["data_sector",number],GpuData["share_data",array],GpuData["dialogdata",table][6,table][2,table]["size",number]
            )))
            return
        }
    } elseif (DS=="fs_rawwritefile") {
        local Ret = dsGetNumber()
        if (Ret==-2) {
            alxos_explorer_error("Not enough space on disk.",400)
            local Entry = DialogData[6,table]
            dsSendDirect("fs_removefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])))
        } elseif (Ret!=1) {
            alxos_explorer_error("File system internal error.",400)
        } else {
            stopCmd()
            DialogData[4,number] = 0
            local Parent = alxos_explorer_dialog("Sent",300,60,"ok","alxos_explorer_listcurdir")
            DialogData[-10,table]:pushNumber(LAST_I)
            EGP:egpText(LAST_I,"File successfully received.",vec2(0,-12))
            EGP:egpParent(LAST_I,Parent)
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
            local Info = DialogData[13,table]
            dsSendDirect("nwsend",GpuData["nwcontroller",entity],
                table(GpuData["nwinterface",number],Info[1,number],GpuData["share_local",number],"gpu","explorer_presend",2,"File successfully sent.")
            )
        }
        ExplorerDsH = ""
    }#[ else {
        alxos_explorer_error("Failed to copy file!",250)
    }
    DialogData[4,number] = 0
    ExplorerDsH = "" ]#
}

function alxos_explorer_nwsend_ds() {
    alxos_explorer_nwsend_ds(table())   
}

function alxos_explorer_sharesretry() {
    if (DialogData[-5,number]!=1) {
        alxos_explorer_closedialog()
        return
    }    
    
    alxos_explorer_share_svs()
}

function alxos_explorer_sellocal() {
    local Inf = table()
    Inf["Yes",array] = array("Remote",70,-140)
    Inf["No",array] = array("Local",50,43)
    
    local Txt = (GpuData["share_mode",number]==1 ? "Select mode" : "Search mode" )
    
    local Parent = alxos_explorer_dialog(Txt,450,100,"yesno","alxos_explorer_local",Inf)
    
    DialogData[7,number] = LAST_I
    DialogData[-10,table]:pushNumber(LAST_I)
    
    Txt = (GpuData["share_mode",number]==1 ? "Do you want to make an local server?" : "Where you want to find servers?" )    
    EGP:egpText(LAST_I,Txt,vec2(-205,-32))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    Txt = (GpuData["share_mode",number]==1 ? "Local server will be available only in home network." : "Local search will find local servers in home network." )  
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,Txt,vec2(-205,-12))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    Txt = (GpuData["share_mode",number]==1 ? "Remote server will be available in all networks." : "Remove search will find remote servers in all networks." )  
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,Txt,vec2(-205,8))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
}

function alxos_explorer_sharesv() {
    local Keys = table()
    Keys["OK",array] = array("Stop Server",100)
    local Parent = alxos_explorer_dialog("Sharing Server #"+entity():id(),340,70,"ok","alxos_explorer_sharestop",Keys)
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Waiting for incoming connections...",vec2(0,-10))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    GpuData["share_started",number] = 1
    GpuData["share_busy",number] = 0
}

function alxos_explorer_local() {
    if (DialogData[-5,number]==0) {
        alxos_explorer_closedialog()
        return   
    }
    local Mode = (DialogData[-5,number]==1 ? 0 : 1 )
    GpuData["share_local",number] = Mode
    
    if (GpuData["share_mode",number]==1) {
        alxos_explorer_sharesv()
    } else {
        alxos_explorer_share_svs()
    }
}

function alxos_explorer_internet_svs() {
    local Parent = alxos_explorer_dialog("Searching...",340,60,"none","")
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Please wait while establish connection...",vec2(0,-10))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    dsSendDirect("nwsend",GpuData["nwcontroller",entity],table(GpuData["nwinterface",number],-1,0,"gpu","internet_connect"))
    runCmd("alxos_explorer_searchpost",1000,0)
    GpuData["servers",table] = table()
}

function number alxos_explorer_searchpost() {
    
    if (GpuData["servers",table]:count()) { 
        alxos_explorer_closedialog()
        
        local MenuTree = table()
        
        for (I=1,GpuData["servers",table]:count()) {
            MenuTree:pushTable(table(0,GpuData["servers",table][I,table][1,string],"alxos_explorer_httpdw",GpuData["servers",table]))    
        }
        alxos_explorer_menu("Providers",MenuTree,280)
        
        return 0
    }
    
    local Parent = alxos_explorer_dialog("Failed",360,60,"yesno","alxos_explorer_serversretry")
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"No servers found. Do you want to retry?",vec2(0,-10))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    return 0
}

function alxos_explorer_httpdw(Args:table) {
    alxos_explorer_closemenu()
    GpuData["server",table] = Args[6,table][1,table]
    local URL = GpuData["dialogdata",table][2,string]
    dsSendDirect("nwsend",GpuData["nwcontroller",entity],table(GpuData["nwinterface",number],GpuData["server",table][2,number],0,"gpu","internet_request",URL))
    runCmd("alxos_http_timeout",10000,0)
    
    local Parent = alxos_explorer_dialog("Downloading...",340,60,"none","")
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Please wait while establish connection...",vec2(0,-10))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
}

function alxos_explorer_serversretry() {
    if (DialogData[-5,number]!=1) {
        alxos_explorer_closedialog()
        return
    }    
    
    alxos_explorer_internet_svs()
}

function alxos_explorer_setnw(Info:table) {
    alxos_explorer_closemenu()
    
    GpuData["nwinterface",number] = Info[6,table][1,number]
    GpuData["nwcontroller",entity] = Info[6,table][3,entity]
    GpuData["dialogdata",table] = Info[6,table][2,table]
    if (Info[6,table][2,table][1,number]) {
        GpuData["share_mode",number] = (Info[6,table][2,table][1,number]==2 ? 1 : 0)
        alxos_explorer_sellocal()
    } else {
        alxos_explorer_internet_svs()
    }
}

function alxos_explorer_nwinterface(Args:table) {
    local MenuTree = table()
    
    local NwConnectsK = Devices["nw_connects",table]:keys()
    for (I=1,Devices["nw_connects",table]:count()) {
        local Entry = Devices["nw_connects",table][NwConnectsK[I,number],table]
        if (Entry[1,array][2,number]) {
            MenuTree:pushTable(table(0,"en"+Entry[1,array][1,number]+" - "+Entry[5,string]+" #"+Entry[4,number],"alxos_explorer_setnw",table(Entry[1,array][1,number],Args,Entry[3,entity])))    
        } 
    }

    if (!MenuTree:count()) {
        local Parent = alxos_explorer_dialog("Error",320,60,"ok","alxos_explorer_closedialog")
        DialogData[-10,table]:pushNumber(LAST_I)
        EGP:egpText(LAST_I,"No active network interfaces found!",vec2(0,-10))
        EGP:egpAlign(LAST_I,1)
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
        return
    }
    
    alxos_explorer_menu("Interfaces",MenuTree,350)
}

function alxos_explorer_sharesv(Info:table) {
    alxos_explorer_closemenu()
    
    if (ExplorerFS["read_only",number]) {
        "alxos_explorer_ro"()
        return
    }
    
    alxos_explorer_nwinterface(table(2))
}

function alxos_explorer_send(Info:table) {
    local Entry = Info[6,table][3,table]  
    alxos_explorer_closemenu()
    local Is_Dir = alxos_wm1_isdir(Entry)
    if (Is_Dir) {
        alxos_explorer_error("You can send only files.",250)
        return
    }
    
    GpuData:unset("server")
    alxos_explorer_nwinterface(table(1,Entry))
}

function alxos_explorer_dw_ds(Args:table) {
    local Type = dsGetType()
    ExplorerDsH = ""
    #ifndef jsonEncode(table) | fileWrite(string,string)
        alxos_explorer_error("Failed to open file!",250)
    #else
    if (Type=="array") {
        local Entry = DialogData[5,table]:clone()
        local FName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        
        FName += "_"+time()+".txt"
        Entry:removeTable("fs")
        
        #[local Arr = dsGetArray()
        local Ret = ""
        for (I=1,Arr:count()) {
            Ret += byte2strraw(Arr[I,number],0)
        }
        fileWrite(FName,Ret) ]#
        
        DialogData[1,number] = 2
        local Inf = jsonEncode(table(Entry,array())):replace("},[]]","},[")
        DialogData[7,array] = dsGetArray()
        DialogData[8,number] = DialogData[7,array]:count()
        DialogData[9,number] = 1
        
        fileWrite(FName,Inf)
        
        DialogData[10,string] = FName
        
        #[EGP:egpText(LAST_I,"File saved as "+FName+".",vec2(0,-12))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpAlign(LAST_I,1)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ ]#
        EGP:egpSetText(DialogData[6,number],"Writing file "+FName+"...")
        
        local PercID = DialogData[-4,number]
        local BoxID = DialogData[-5,number]
        EGP:egpSize(BoxID,vec2(1,20))
        EGP:egpSetText(PercID,"0%")
        
        runCmd("alxos_explorer_dw_progress",1)
    } else {
        alxos_explorer_error("Failed to open file!",250)
    }
    #endif
}

function alxos_explorer_dw_ds() {
    alxos_explorer_dw_ds(table())   
}

function alxos_explorer_dw_progress() {
    local First = DialogData[1,number]
    if (!First) {
        local Width = 420
        local Height = 80
        
        local Parent = alxos_explorer_dialog("Download file",Width,Height,"progress","")
        local EntID = DialogData[-10,table]
        EntID:pushNumber(LAST_I)
        DialogData[6,number] = LAST_I
        
        local Entry = DialogData[5,table]
        local FName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        
        EGP:egpText(LAST_I,"Reading file "+FName+"...",vec2(-190,-22))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
        
        DialogData[1,number] = 1
        runCmd("alxos_explorer_dw_progress",1)
        ExplorerDsH = "alxos_explorer_dw_ds"
        return
    }
    
    if (First==2) {
        local I = DialogData[9,number]
        local Max = DialogData[8,number]      
        local Arr = DialogData[7,array] 
        local FName = DialogData[10,string]
        
        #ifdef fileCanWrite()
        if (!fileCanWrite()) {
            runCmd("alxos_explorer_dw_progress",10)
            return
        }
        #endif
        
        local Buffer = ""
        while(perf(60)) {
            if (I>Max) { break }
            if (I!=1) { Buffer += "," }
            Buffer += Arr[I,number]
            I++
        }
        
        if (I>=Max) { Buffer += "]]" }
        
        #ifdef fileCanWrite()
            fileAppend(FName,Buffer)
        #endif
        
        DialogData[9,number] = I
        
        local PercID = DialogData[-4,number]
        local BoxID = DialogData[-5,number]
        local BoxW = DialogData[-6,number]
        local CalcP = round(I/Max*100)
        BoxW = ceil(BoxW/100*CalcP)
        if (BoxW<1) { BoxW = 1 }
        EGP:egpSize(BoxID,vec2(BoxW,20))
        EGP:egpSetText(PercID,CalcP+"%")
        DialogData[4,number] = I
        
        if (I<=Max) {
            runCmd("alxos_explorer_dw_progress",1)
        } else {
            local Parent = alxos_explorer_dialog("Saved",420,60,"ok","alxos_explorer_listcurdir")
            DialogData[-10,table]:pushNumber(LAST_I)
            EGP:egpText(LAST_I,"File saved as "+FName+".",vec2(0,-12))
            EGP:egpParent(LAST_I,Parent)
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ 
            print(_HUD_PRINTTALK,"File saved as "+FName)
        }
        return    
    }
    
    local CurTask = ExplorerFS["hdd_io",wirelink]["CurTask",table]
    local I = CurTask[2,number]
    local Max = CurTask[1,number]
    local Last = DialogData[4,number]
    
    if (I==0 & Last!=I) { return }

    if (Max>0) {
        local PercID = DialogData[-4,number]
        local BoxID = DialogData[-5,number]
        local BoxW = DialogData[-6,number]
        local CalcP = round(I/Max*100)
        BoxW = ceil(BoxW/100*CalcP)
        if (BoxW<1) { BoxW = 1 }
        EGP:egpSize(BoxID,vec2(BoxW,20))
        EGP:egpSetText(PercID,CalcP+"%")
        DialogData[4,number] = I
    }
    
    if (I<=Max) {
        runCmd("alxos_explorer_dw_progress",1)
    }   
}

function alxos_explorer_dwpre() {
    local DW = (DialogData[-5,number]==1 ? 1 : 0 )    
    if (!DW) {
        alxos_explorer_closedialog()
        return
    }
    
    #ifndef jsonEncode(table) | fileWrite(string,string)
        alxos_explorer_error("E2 Extension json and file is not enabled! Aborting...",450)
        if (1) { return }
    #endif
    
    local Entry = DialogData[1,table]
    dsSendDirect("fs_rawreadfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(
        ExplorerFS,Entry["cluster",number],Entry["data_sector",number]
    )))
    DialogData[5,table] = Entry
    alxos_explorer_dw_progress()
    ExplorerCurTask = "download"
}

function alxos_explorer_dw(Info:table) {
    local Entry = Info[6,table][3,table]  
    alxos_explorer_closemenu()
    if (alxos_wm1_isdir(Entry)) {
        alxos_explorer_error("You can download only files.",300)
        return
    }    
    
    local Parent = alxos_explorer_dialog("Download file",410,160,"okcancel","alxos_explorer_dwpre")

    local Strs = array()
    Strs:pushString("This action will save selected file to")
    Strs:pushString("garrysmod/data/e2files folder.")
    Strs:pushString("Due to epxression2 lack of null byte support")
    Strs:pushString("in file.write function, data written in json format.")
    Strs:pushString("You will need convert it via lua/php script")
    Strs:pushString("to restore it as normal file.")
    
    DialogData[1,table] = Entry
    local LAST_Y = (-10*Strs:count())-2
    for (I=1,Strs:count()) {
        DialogData[-10,table]:pushNumber(LAST_I)
        EGP:egpText(LAST_I,Strs[I,string],vec2(-180,LAST_Y))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ LAST_Y += 20
    }
}

function alxos_explorer_refresh() {
    local Parent = alxos_explorer_dialog("Initializating...",330,60,"none","")
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Please wait for drive get ready...",vec2(0,-10))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    ExplorerCurTask = "refresh"
    ExplorerDsH = "alxos_explorer_refresh_ds"
    dsSendDirect("read_disk",ExplorerFS["hdd_io",wirelink]:entity(),table("reinit",entity(),ExplorerFS["hddinfo",table],0,ExplorerFS))
}

function alxos_explorer_refresh_close() {
    alxos_explorer_closedialog()
    alxos_explorer_listcurdir()
}

function alxos_explorer_refresh_ds() {
    local Info = dsGetTable()
    local Ret = Info[1,string]
    ExplorerDsH = ""
    if (Ret=="OK") {
        alxos_explorer_closedialog()
        alxos_explorer_listcurdir()
    } else {
        local Arr = Ret:explode(NL)
        local Parent = alxos_explorer_dialog("Error",400,40+(20*Arr:count()),"ok","alxos_explorer_refresh_close")
        local LAST_Y = -2+(-10*Arr:count())
        GpuData[100,string] = Ret
        for (I=1,Arr:count()) {
            DialogData[-10,table]:pushNumber(LAST_I)
            EGP:egpText(LAST_I,Arr[I,string],vec2(0,LAST_Y))
            EGP:egpAlign(LAST_I,1)
            EGP:egpParent(LAST_I,Parent)
            EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ LAST_Y += 20
        }
        dsSendDirect("playgmsound",Devices["spu",entity],table(0,0.2,"buttons/button10.wav")) 
    }    
}

function alxos_explorer_ro() {
    alxos_explorer_error("Can't run this command on read-only file system!",420)
}

function alxos_explorer_delete(Info:table) {
    local Entry = Info[3,table]
    if (Entry["name",string]=="..") { return }
    if (ExplorerFS["read_only",number]) {
        alxos_explorer_ro()
        return
    }
    local Parent = alxos_explorer_dialog("Delete",400,60,"yesno","alxos_explorer_delact")
    
    DialogData[6,table] = Info
    
    DialogData[7,number] = LAST_I
    local FName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Are you sure want to delete '"+FName+"'?",vec2(-180,-12))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
}

function alxos_explorer_delact() {
    local Del = (DialogData[-5,number]==1 ? 1 : 0 )
    if (Del) {
        local Entry = DialogData[6,table][3,table]
        if (alxos_wm1_isdir(Entry)) {
            ExplorerDsH = "alxos_explorer_delpre"
            dsSendDirect("fs_listdir",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])))    
        } else {
        
            local Parent = alxos_explorer_dialog("Removing file",400,80,"progress","")
        
            DialogData[-10,table]:pushNumber(LAST_I)
            EGP:egpText(LAST_I,"Please wait, this can take few minutes...",vec2(0,-22))
            EGP:egpParent(LAST_I,Parent)
            EGP:egpAlign(LAST_I,1)
            EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
            
            runCmd("alxos_explorer_cmd",100)
        
            # ExplorerCopy["fs",table]==ExplorerFS -- sorry
            if (Entry["cluster",number]==ExplorerCopy["cluster",number]) {
                ExplorerCopy = table()
            }
        
            ExplorerDsH = "alxos_explorer_delpost"
            dsSendDirect("fs_removefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])))
        }
    } else {
        alxos_explorer_closedialog()
    }   
}

function alxos_explorer_renamepre() {
    local RenFile = (DialogData[-5,number]==1 ? 1 : 0 )    
    if (!RenFile) {
        alxos_explorer_closedialog()
        return
    }
    
    local FNameT = DialogData[10,table][0,table]
    local FNameF = FNameT[2,string]
    local FName = FNameF
    local FNameE = ""
    if (FNameF:find(".")) {
        FName = FNameF:sub(0,FNameF:find(".")-1)
        FNameE = FNameF:sub(FNameF:find(".")+1,FNameF:length())
    }
    
    if (FNameF=="") {
        alxos_explorer_error("File name cannot be empty.",250)
        return
    }
    
    for(I=0,ExplorerDir[3,table]:count()) {
        local Entry = ExplorerDir[3,table][I,table]
        local FullName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        if (FullName==FNameF) {
            alxos_explorer_error("Folder or file with this name already exists.",400)
            return 
        }
    }
    
    local Entry = DialogData[1,table]
    dsSendDirect("fs_rename",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry,FName,FNameE)))
}

function alxos_explorer_rename(Info:table) {
    local Entry = Info[6,table][3,table]  
    alxos_explorer_closemenu()
    if (Entry["name",string]=="..") { return }
    if (ExplorerFS["read_only",number]) {
        alxos_explorer_ro()
        return
    }
    local Parent = alxos_explorer_dialog("Rename",400,80,"text","alxos_explorer_renamepre")
    local Entries = table()
    DialogData[1,table] = Entry
    
    local Is_Dir = alxos_wm1_isdir(Entry)
    
    local Str = (Is_Dir ? "Folder name:" : "File name:")
    local Sz = 360
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,Str,vec2(-180,-22))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpBox(LAST_I,vec2(-180,-4),vec2(Sz,20))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,168,168,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    local FName = Entry["name",string]
    if (!Is_Dir) {
        FName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        Entries[0,table] = table(LAST_I,FName,"^[A-Za-z0-9_!@#$^ .-]$",14,"alxos_explorer_fnamefilter")
    } else {
        Entries[0,table] = table(LAST_I,FName,"^[A-Za-z0-9_!@#$^ -]$",10)
    }
    EGP:egpText(LAST_I,FName+"_",vec2(-178,-4))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[10,table] = Entries
    DialogData[11,number] = 0
    DialogData[12,number] = Entries:count()
}

function number alxos_explorer_cmd() {
    local CurTask = ExplorerFS["hdd_io",wirelink]["CurTask",table]
    
    if (CurTask:count()) { runCmd("alxos_explorer_cmd",100) }
    else { return 0 }
    
    local Max = CurTask[1,number]
    local Cur = CurTask[2,number]
    if (Max==0) { return 0 }
    
    local PercID = DialogData[-4,number]
    local BoxID = DialogData[-5,number]
    local BoxW = DialogData[-6,number]
    local CalcP = round(Cur/Max*100)
    BoxW = ceil(BoxW/100*CalcP)
    if (BoxW<1) { BoxW = 1 }
    EGP:egpSize(BoxID,vec2(BoxW,20))
    EGP:egpText(PercID,CalcP+"%",EGP:egpPos(PercID))

    return 0
}

function alxos_explorer_delpre() {
    local Info = dsGetTable()
    local Entry = DialogData[6,table][3,table]
    if (Info:count()>2) {
        ExplorerDsH = ""
        local FName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        local TxtID = DialogData[7,number]
        alxos_explorer_error("Directory '"+FName+"' is not empty, cannot remove.",400)
    } else {
        ExplorerCurTask = "delete"
        ExplorerDsH = "alxos_explorer_delpost"
        dsSendDirect("fs_removefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])))
    }
}

function alxos_explorer_delpost() {
    ExplorerDsH = ""
    stopCmd()
    alxos_explorer_listcurdir()
}

function alxos_explorer_reboot_act() {
    local Act = (DialogData[-5,number]==1 ? 1 : 0 )
    if (Act) {
        DEBUG = 0
        reboot()
    } else {
        alxos_explorer_closedialog()
    }   
}

function alxos_explorer_reboot() {
    local Parent = alxos_explorer_dialog("Exit",340,60,"yesno","alxos_explorer_reboot_act")
    local Entries = table()
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Are you sure want to exit and reboot?",vec2(0,-12))
    EGP:egpAlign(LAST_I,1)
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
}

function alxos_explorer_mkdir() {
    if (ExplorerFS["read_only",number]) {
        alxos_explorer_ro()
        return
    }
    
    local Parent = alxos_explorer_dialog("Create Folder",400,80,"text","alxos_explorer_mkdirpre")
    local Entries = table()
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Folder name:",vec2(-180,-22))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpBox(LAST_I,vec2(-180,-4),vec2(360,20))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,168,168,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    Entries[0,table] = table(LAST_I,"","^[A-Za-z0-9_ -]$",10)
    EGP:egpText(LAST_I,"_",vec2(-178,-4))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[10,table] = Entries
    DialogData[11,number] = 0
    DialogData[12,number] = Entries:count()
    
    ExplorerKeyH = "dialog"
}

function alxos_explorer_mkdirpre() {
    local MkDir = (DialogData[-5,number]==1 ? 1 : 0 )
    if (!MkDir) {
        alxos_explorer_closedialog()
        return   
    }
    
    local FNameT = DialogData[10,table][0,table]
    local FName = FNameT[2,string]
    
    if (FName=="") {
        alxos_explorer_error("Folder name cannot be empty.",280)
        return
    }
    
    for(I=0,ExplorerDir[3,table]:count()) {
        local Entry = ExplorerDir[3,table][I,table]
        local FullName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        if (FullName==FName) {
            alxos_explorer_error("Folder or file with this name already exists.",400)
            return
        }
    } 
    
    ExplorerDsH = "alxos_explorer_mkdirpost"
    dsSendDirect("fs_mkfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,FName,"",1,ExplorerDir[1,number])))   
}

function alxos_explorer_mkdirpost() {
    ExplorerDsH = ""
    alxos_explorer_listcurdir()
}

function number alxos_explorer_fnamefilter(Char:string,Text:string) {
    local Dot = Text:find(".")
    if (Dot) {
        if (Char==".") { return 0 }
        local Ext = Text:sub(Dot,Text:length())
        if (Ext:length()>3) { return 0 }
    } elseif (Text:length()>9 & Char!=".") {
        return 0
    }
    return 1
}

function alxos_explorer_mkfile() {
    if (ExplorerFS["read_only",number]) {
        alxos_explorer_ro()
        return
    }
    
    local Parent = alxos_explorer_dialog("Create File",400,160,"text","alxos_explorer_mkfilepre")
    local Entries = table()
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"File name:",vec2(-180,-67))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpBox(LAST_I,vec2(-180,-49),vec2(360,20))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,168,168,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    Entries[0,table] = table(LAST_I,"","^[A-Za-z0-9_!@#$^ .-]$",14,"alxos_explorer_fnamefilter")
    EGP:egpText(LAST_I,"_",vec2(-178,-49))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    #ifdef runOnHTTP(number)
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"File content or URL: (not necessary)",vec2(-180,-29))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpBox(LAST_I,vec2(-180,-9),vec2(360,20))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,168,168,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    Entries[1,table] = table(LAST_I,"","^[A-Za-z0-9_&$#?@!*()\"'^%%+;:.,|/\\ %[%]-]$",100)
    EGP:egpText(LAST_I,Entries[2,table][2,string],vec2(-178,-9))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Note: you can paste url here using command",vec2(-180,16))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"\"!url http://URL\" in chat",vec2(-180,36))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    #else
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"File content: (not necessary)",vec2(-180,-29))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpBox(LAST_I,vec2(-180,-9),vec2(360,20))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,168,168,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    Entries[2,table] = table(LAST_I,"","^[A-Za-z0-9_&$#?@!*()\"'^%%+;:.,|/\\ %[%]-]$",100)
    EGP:egpText(LAST_I,Entries[2,table][2,string],vec2(-178,-9))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Note: http download is disabled due to missing",vec2(-180,16))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"E2 HTTP Extension, please enable it.",vec2(-180,36))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++

    #endif
    
    ExplorerKeyH = "dialog"
    
    #ifdef runOnHTTP(number)
    ChatHandler = "alxos_explorer_chat"
    runOnChat(1)
    ChatPlayer = Keyboard[2,entity]
    #endif
    
    DialogData[10,table] = Entries
    DialogData[11,number] = 0
    DialogData[12,number] = Entries:count()
}

function alxos_explorer_chat(Ply:entity) {
    local Said = Ply:lastSaid():trim()
    local Find = Said:find(" ")
    local Cmd = Said:left(Find-1)
    local Url = Said:sub(Find+1)  
    if (Cmd=="!url") {
        local Entry = DialogData[10,table][1,table]
        local ID = Entry[1,number]
        Entry[2,string] = Url
        EGP:egpText(ID,Url,EGP:egpPos(ID))
    }
}

function alxos_explorer_mkfilepre() {
    ChatHandler = ""
    runOnChat(0)
    ChatPlayer = noentity()
    
    local MkFile = (DialogData[-5,number]==1 ? 1 : 0 )
    if (!MkFile) {
        alxos_explorer_closedialog()
        return
    }
    
    local FNameT = DialogData[10,table][0,table]
    local FNameF = FNameT[2,string]
    local FName = FNameF
    local FNameE = ""
    if (FNameF:find(".")) {
        FName = FNameF:sub(0,FNameF:find(".")-1)
        FNameE = FNameF:sub(FNameF:find(".")+1,FNameF:length())
    }
    
    if (FNameF=="") {
        alxos_explorer_error("File name cannot be empty.",250)
        return
    }
    
    for(I=0,ExplorerDir[3,table]:count()) {
        local Entry = ExplorerDir[3,table][I,table]
        local FullName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
        if (FullName==FNameF) {
            alxos_explorer_error("Folder or file with this name already exists.",400)
            return 
        }
    } 
    
    #ifdef runOnHTTP(number)
    local URL = DialogData[10,table][1,table][2,string]
    if (URL:left(7)=="http://" & URL!="http://" | URL:left(8)=="https://" & URL!="https://") {
        alxos_explorer_nwinterface(table(0,URL,FName,FNameE))
        return
    }
    #endif
    
    ExplorerDsH = "alxos_explorer_mkfilepost"
    dsSendDirect("fs_mkfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,FName,FNameE,0,ExplorerDir[1,number])))
}

function alxos_explorer_httpdwpost(Data:string) {
    stopCmd()
    if (Data=="") {
        GpuData:unset("http_dw")
        GpuData:unset("servers")
        GpuData:unset("server")
        GpuData:unset("dialogdata")
        alxos_explorer_error("Response is empty.",300)
        return  
    }
    local FName = GpuData["dialogdata",table][3,string]
    local FNameE = GpuData["dialogdata",table][4,string]
    ExplorerDsH = "alxos_explorer_mkfilepost"
    GpuData["http_dw",number] = 1
    GpuData["dialogdata",table][5,string] = Data
    dsSendDirect("fs_mkfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,FName,FNameE,0,ExplorerDir[1,number])))  
}

function alxos_explorer_mkfilepost() {
    local Type = dsGetType()
    if (Type=="table") {
        local Parent = alxos_explorer_dialog("Writing file",400,80,"progress","")
    
        DialogData[-10,table]:pushNumber(LAST_I)
        EGP:egpText(LAST_I,"Please wait, this can take few minutes...",vec2(0,-22))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpAlign(LAST_I,1)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++    
        
        DialogData[12,table] = dsGetTable()
        runCmd("alxos_explorer_mkfilehttp",100)
        return
    }
    alxos_explorer_closedialog()
    ExplorerDsH = ""
    alxos_explorer_listcurdir()
}

function number alxos_explorer_mkfile_progress() {
    local CurTask = ExplorerFS["hdd_io",wirelink]["CurTask",table]
    
    if (CurTask:count()) { runCmd("alxos_explorer_mkfile_progress",100) }
    else { return 0 }
    
    local Max = CurTask[2,number]
    local Cur = CurTask[3,number]
    if (Max==0) { return 0 }
    
    local PercID = DialogData[-4,number]
    local BoxID = DialogData[-5,number]
    local BoxW = DialogData[-6,number]
    local CalcP = round(Cur/Max*100)
    BoxW = ceil(BoxW/100*CalcP)
    if (BoxW<1) { BoxW = 1 }
    EGP:egpSize(BoxID,vec2(BoxW,20))
    EGP:egpText(PercID,CalcP+"%",EGP:egpPos(PercID))

    return 0
}

function alxos_explorer_mkfilehttp() {
    stopCmd()
    local Data = ""
    if (!GpuData["http_dw",number]) {
        Data = DialogData[10,table][1,table][2,string]
    } else {
        Data = GpuData["dialogdata",table][5,string]
    }
    if (Data!="") {
        local Entry = DialogData[12,table]
        local C = Entry["cluster",number]
        local Sd = Entry["data_sector",number]
        ExplorerDsH = "alxos_explorer_mkfilehttp_post"
        
        runCmd("alxos_explorer_mkfile_progress",100)    
        
        #printTable(table(Data))
        
        ExplorerCurTask = "mkfile"
        dsSendDirect("fs_writefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,C,Sd,Data)))    
    }    
}

function number alxos_http_timeout() {
    alxos_explorer_error("Server timeout.",400)
    GpuData:unset("http_dw")
    GpuData:unset("servers")
    GpuData:unset("server")
    GpuData:unset("dialogdata")    
    local Entry = DialogData[12,table]
    ExplorerDsH = ""
    #dsSendDirect("fs_removefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])))
    return 0
}

function alxos_explorer_mkfilehttp_post() {
    local Ret = dsGetNumber()
    if (Ret==-2) {
        alxos_explorer_error("Not enough space on disk.",400)
        local Entry = DialogData[12,table]
        ExplorerDsH = ""
        dsSendDirect("fs_removefile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])))
    } elseif (Ret!=1) {
        alxos_explorer_error("File system internal error.",400)
    } else {
        alxos_explorer_listcurdir()
    }
}

function alxos_explorer_chvolume(Info:table) {
    local CurSerial = ExplorerFS["volume_serial",number]
    if (Info[6,table]:count()) {
        local Entry = Info[6,table]
        #if (Entry[1,table]["fs_str_id",string]=="WCD") {
        #    dsSendDirect()
        #} else {
            alxos_explorer_closemenu()
            ExplorerFS = Entry[1,table]
            ExplorerPath = table(Entry[2,string])
            alxos_explorer_listdir(ExplorerFS,ExplorerFS["root_dir_cluster",number],0)
        #}
        return   
    }
    
    local MenuTree = table()
    
    local CurVol = "C:"
    local I = 1
    
    foreach(K,V:table=ExplorerAllFs) {
        if (K=="C") {
            MenuTree:unshiftTable(table(0,K+": ["+V["volume_name",string]+"]","alxos_explorer_chvolume",table(V,K+":")))
        } else {
            MenuTree:pushTable(table(0,K+": ["+V["volume_name",string]+"]","alxos_explorer_chvolume",table(V,K+":")))
        }
        if (V["volume_serial",number]==CurSerial) {
            CurVol = K+":"
        }
    }
    
    ExplorerCurTask = "chvolume"
    alxos_explorer_menu("Select Volume",MenuTree,280)
    
    local CurVolI = 1
    for(I=1,MenuTree:count()) {
        if (MenuTree[I,table][6,table][2,string]==CurVol) {
            CurVolI = I  
            break 
        }   
    }
    
    DialogData[-4,number] = CurVolI

    local BoxID = DialogData[-2,number]
    local Info = DialogData[-3,table][CurVolI,table]    
    EGP:egpPos(BoxID,Info[5,vector2])
     
}

function alxos_explorer_fileinfo(Info:table) {
    alxos_explorer_closemenu()
    
    local Entry = Info[6,table][3,table]    
    local IsDir = alxos_wm1_isdir(Entry)
    local FName = Entry["name",string]+(Entry["ext",string]!="" ? "."+Entry["ext",string] : "")
    
    local Height = 145
    local LAST_Y = -55
    local XX = -140
    
    if (IsDir) {
        Height -= 20
        LAST_Y += 10
    }
    
    local Parent = alxos_explorer_dialog(FName,320,Height,"ok","alxos_explorer_closedialog")
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Is folder: "+(alxos_wm1_isdir(Entry) ? "Yes" : "No" ),vec2(XX,LAST_Y))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++ 
    LAST_Y += 20
    
    if (!IsDir) {
        DialogData[-10,table]:pushNumber(LAST_I)
        EGP:egpText(LAST_I,"File size: "+alxos_nicesize(Entry["size",number]),vec2(XX,LAST_Y))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
        LAST_Y += 20
    }       
    local Date = Entry["time_create",number]
    local DateStr = alxos_wm1_date(Date)+" "+alxos_wm1_time(Date)
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Creation time: "+DateStr,vec2(XX,LAST_Y))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    LAST_Y += 20
    
    local Date = Entry["time_modify",number]
    local DateStr = alxos_wm1_date(Date)+" "+alxos_wm1_time(Date)
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Modify time: "+DateStr,vec2(XX,LAST_Y))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    LAST_Y += 20
    
    local Date = Entry["time_access",number]
    local DateStr = alxos_wm1_date(Date)+" "+alxos_wm1_time(Date)
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Last access: "+DateStr,vec2(XX,LAST_Y))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
}

function alxos_explorer_sysinfo(Info:table) {
    egpClear()
    alxos_explorer_bg()
    
    ExplorerKeyH = "quit"
    alxos_explorer_ft(array("Quit"))
    
    local Y = LAST_Y
    EGP:egpText(LAST_I,"PC Information",vec2(30,Y))
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++ Y+=24
    
    EGP:egpLine(LAST_I,vec2(10,Y),vec2(502,Y)) 
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=5
    
    local Quota = (softQuota()>TickQuota ? TickQuota : softQuota())
    EGP:egpText(LAST_I,"CPU - "+Devices["names",table]["cpu",string]+" ("+round(Quota/1000,2)+" Mhz)",vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20 
    
    EGP:egpText(LAST_I,"GPU - "+Devices["names",table]["gpu",string]+" ("+ceil(egpMaxObjects()/128)*1024+" KB)",vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20
    
    if (!Devices["spu",entity]:isValid()) { Status = "Not connected" } else { Status = "Connected" }
    #ifndef soundStop(number)
        if (Status=="Connected") {
            Status = "Malfunction"
        }
    #endif
    EGP:egpText(LAST_I,"Sound - "+(Status!="Not connected" ? Devices["names",table]["spu",string]+" - " : "")+Status,vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20
    
    if (!DS:entity():isValid()) { Status = "Not connected" } else { Status = "Connected" }
    EGP:egpText(LAST_I,"Digital Screen - "+Status,vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20
    
    if (Keyboard[1,entity]==noentity()) {
        EGP:egpText(LAST_I,"Keyboard - Not connected",vec2(30,Y))
        EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20
    } else { 
        EGP:egpText(LAST_I,Devices["names",table]["keyboard",string]+" - Connected",vec2(30,Y))
        EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20
    }
    
    if (!Keyboard) { Status = "Not connected" } else { Status = "Connected" }
    EGP:egpText(LAST_I,"Keyboard - "+Status,vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20
    
    if (!Keyboard["User",entity]:isValid()) { Status = "Not user" } else { Status = Keyboard["User",entity]:name() }
    EGP:egpText(LAST_I,"Keyboard User - "+Status,vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=40
    
    EGP:egpText(LAST_I,"Connected HDDs",vec2(30,Y))
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++ Y+=24
    
    EGP:egpLine(LAST_I,vec2(10,Y),vec2(502,Y)) 
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=5
    
    for(I=1,HDDS:count()) {
        local Item = HDDS[I,table]
        if (Item:count()) {
            EGP:egpText(LAST_I,"HDD"+(I-1)+" - "+Item["name",string]+(Item["type",number]!=1 ? " - Size "+(Item["size",number]*Item["sector_size",number])/1024+" KB" : ""),vec2(30,Y))
            EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20
        } else {
            EGP:egpText(LAST_I,"HDD"+(I-1)+" - Not connected",vec2(30,Y))
            EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20
        }
    }
    
    Y+=20
    
    EGP:egpText(LAST_I,"Wiremod Information",vec2(30,Y))
    EGP:egpColor(LAST_I,255,255,0,255) LAST_I++ Y+=24
    
    EGP:egpLine(LAST_I,vec2(10,Y),vec2(502,Y)) 
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=5
    
    EGP:egpText(LAST_I,"Expression2 Soft Quota - "+softQuota(),vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20 
    
    EGP:egpText(LAST_I,"Expression2 Hard Quota - "+hardQuota(),vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=20 
    
    EGP:egpText(LAST_I,"EGP Max Objects - "+egpMaxObjects(),vec2(30,Y))
    EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ Y+=40    
    
    ExplorerCurTask = "sysinfo"
}

function alxos_explorer_key(Key:string,Pressed) {
    if (!Pressed) { return } 
    
    if (ExplorerKeyH=="listdir") {
        if (Key=="f1") {
            alxos_explorer_info()       
        }
        if (Key=="f8") {
            alxos_explorer_reboot()   
        }
        local Index = GpuData[7,number]
        if (Key=="down" | Key=="up") { 
            local Max = GpuData[8,number]
            if (Max<2) { return }
            local Ind = Index
            if (Key=="down") {
                Index = (Index==Max ? 1 : Index+1)
            } else {
                Index = (Index==1 ? Max : Index-1)
            }
            GpuData[7,number] = Index
            local BoxID = GpuData[1,number]
            local Info = GpuData[6,table][Index,table]            
            EGP:egpPos(BoxID,vec2(7,Info[1,number]))
            local LAST_ID = Info[2,number]
            local CUR_ID = GpuData[6,table][Ind,table][2,number]
            for (I=0,3) {
                EGP:egpColor(CUR_ID+I,128,255,255,255)
                EGP:egpColor(LAST_ID+I,0,0,0,255)
            }
        } elseif (Key=="enter" | Key=="f3") {
            local Info = GpuData[6,table][Index,table]
            local Entry = Info[3,table]
            if (alxos_wm1_isdir(Entry)) {
                if (Entry["name",string]!="..") {
                    ExplorerPath:pushString(Entry["name",string])
                } else {
                    ExplorerPath:pop()
                }
                alxos_explorer_listdir(ExplorerFS,Entry["cluster",number],Entry["data_sector",number])    
            } else {
                if (Entry["ext",string]=="e2e") {
                    dsSendDirect("alxos_execute",E2_CPU,table(entity(),ExplorerFS,Entry))
                } else {
                    dsSendDirect("alxos_openfile",E2_CPU,table(entity(),Entry))
                }
            }
        } elseif (Key=="f4") {
            local Info = GpuData[6,table][Index,table]
            local Entry = Info[3,table]
            if (alxos_wm1_isdir(Entry)) {
                alxos_explorer_key("enter",1)
            } else {
                "alxos_explorer_reader_init"(Entry)
            }
        } elseif (Key=="f2") {
            local Info = GpuData[6,table][Index,table]
            alxos_explorer_mainmenu(Info)
        } elseif (Key=="f7" | Key=="delete") {
            if (ExplorerFS["read_only",number]) {
                if (Key=="delete") { return }
                alxos_explorer_refresh()
                return 
            } 
            local Info = GpuData[6,table][Index,table]
            alxos_explorer_delete(Info)
        } elseif (Key=="f5") {
            alxos_explorer_mkdir()
        } elseif (Key=="f6") {
            alxos_explorer_mkfile()
        }
    } elseif (ExplorerKeyH=="quit") {
        if (Key=="f8") {
            alxos_explorer_listcurdir()    
        }
    } elseif (ExplorerKeyH=="stop_progress") {
        if (Key=="f8") {
            alxos_explorer_closedialog()
            dsSendDirect("clear",ExplorerFS["hdd_io",wirelink]:entity(),entity())
            if (ExplorerFS["hdd_io",wirelink]:entity()!=ExplorerCopy["fs",table]["hdd_io",wirelink]:entity()) {
                dsSendDirect("clear",ExplorerCopy["fs",table]["hdd_io",wirelink]:entity(),entity())            
            }
            stopAllTimers()
            alxos_explorer_handlers()
            alxos_explorer_listcurdir()  
        }
    } elseif (ExplorerKeyH=="reader" | ExplorerKeyH=="readermove") {
        if (Key=="f8") {
            dsSendDirect("clear",ExplorerFS["hdd_io",wirelink]:entity(),entity())
            alxos_explorer_handlers()
            alxos_explorer_listcurdir()        
        }
        if (ExplorerKeyH=="readermove") {
            if (Key=="right" | Key=="left") {
                #[ Old code - without monowidth font
                local Lines = GpuData[11,table]
                local VEC = vec2(400,0)   
                local FPos = EGP:egpPos(Lines[1,number])
                if (Key=="right") { VEC *= -1 }
                elseif (FPos:x()>0) { VEC = vec2(0,VEC:y()) }            
                for(I=1,Lines:count()) {
                    local ID = Lines[I,number]
                    EGP:egpPos(ID,EGP:egpPos(ID)+VEC)   
                }  ]#
                local Lines = GpuData[11,table]
                local St = GpuData[13,number]
                local AddMax = 48
                local Max = 30
                local Ed = St+Max
                if (Key=="left") { St -= Max Ed = St+AddMax }
                else { St += Max Ed += AddMax }
                if (St<=1) { St = 1 Ed = St+AddMax }
                GpuData[13,number] = St
                for(I=1,Lines:count()) {
                    local Item = Lines[I,array]
                    EGP:egpText(Item[1,number],Item[2,string]:sub(St,Ed),EGP:egpPos(Item[1,number]))   
                }              
            } elseif (Key=="up" | Key=="down") {
                "alxos_explorer_reader_move"(Key)
            }
        }
    } elseif (ExplorerKeyH=="mainmenu") {
        alxos_menu_key(Key,"alxos_explorer_closemenu")
    } elseif (ExplorerKeyH=="dialog") {
        if (ExplorerDsH!="") { return }
        local Index = DialogData[-5,number]
        local Type = DialogData[-2,string]
        if (alxos_dialog_key(Key,Pressed)) {
            return
        }
    }
}

function alxos_explorer_reader_init(FInfo:table) {
    egpClear()
    alxos_explorer_bg()
    
    ExplorerFile = FInfo["name",string]+(FInfo["ext",string]!="" ? "."+FInfo["ext",string] : "")
    alxos_explorer_ft(array("Quit")) #"Edit"
    
    local LAST_SI = GpuData[100,number]
    if (LAST_SI>0) { LAST_I = LAST_SI } else { GpuData[100,number] = LAST_I }
    
    local Parent = alxos_explorer_dialog("Opening file",400,80,"progress","alxos_explorer_listcurdir")
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Please wait, this can take few minutes...",vec2(0,-22))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    ExplorerDsH = "alxos_explorer_reader"
    ExplorerKeyH = "reader"
    ExplorerCurTask = "reader"
    GpuData[7,table] = FInfo
    local End = ExplorerFS["bytes_in_sector",number]*ExplorerFS["sectors_in_cluster",number]
    if (ExplorerFS["fs_str_id",string]=="WCD") {
        End = 512   
    }
    GpuData[8,number] = End
    GpuData[12,number] = 0
    GpuData[13,number] = 1
    GpuData[14,table] = table()
    GpuData[15,number] = 1
    dsSendDirect("fs_readfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,FInfo,0,End)))        
}

function alxos_explorer_reader_move(Key:string) {
    
    local Start = GpuData[9,string]:length()
    local Offset = GpuData[12,number]
    local PosTbl = GpuData[14,table]
    local CurPos = GpuData[15,number]
    
    #print(Start+" | "+Offset)  

    if (Key=="down") {
        #GpuData[13,number] = Start
        PosTbl[CurPos,number] = Offset #array(Start,Offset)
        Start += Offset  
        CurPos++
    } else {
        if (Offset<=0) { return }
        #Start = 0 #Offset-GpuData[13,number]
        # sorry i'm lazy to do this correct, just move to start
        #if (Start<0) { Start = 0 }
        CurPos--
        #local Item = PosTbl[CurPos,array]
        Start = PosTbl[CurPos,number] #Item[1,number]
        #Offset = Item[2,number]
    }
    
    local Lines = GpuData[11,table]
    for(I=1,Lines:count()) {
        local ID = Lines[I,array][1,number]
        if (I==1) { LAST_Y = EGP:egpPos(ID):y() }
        EGP:egpRemove(ID)   
    }
    
    local LAST_SI = GpuData[100,number]
    if (LAST_SI>0) { LAST_I = LAST_SI } else { GpuData[100,number] = LAST_I }
    
    local Parent = alxos_explorer_dialog("Opening file",400,80,"progress","alxos_explorer_listcurdir")
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Please wait, this can take few minutes...",vec2(0,-22))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    local FInfo = GpuData[7,table]
    
    ExplorerDsH = "alxos_explorer_reader"
    ExplorerKeyH = "reader"
    local End = ExplorerFS["bytes_in_sector",number]*ExplorerFS["sectors_in_cluster",number]
    if (ExplorerFS["fs_str_id",string]=="WCD") {
        End = 512   
    }
    GpuData[8,number] = End
    GpuData[9,string] = ""
    GpuData[10,number] = 0
    GpuData[11,table] = table()
    GpuData[12,number] = Start
    #GpuData[13,number] = 1
    GpuData[14,table] = PosTbl
    GpuData[15,number] = CurPos
    dsSendDirect("fs_readfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,FInfo,Start,End)))     
}

function number alxos_explorer_reader_cmd(Args:table) {
    local Data = Args[2,string]
    local Last = Args[3,number]
    local Max = Args[4,number]
    local TotalLines = Args[5,number]
    local CurStr = ""
    local Lines = Args[6,table]
    while(perf()) {
        local Find = Data:find(NL,Last)
        if (Find>0) {
            CurStr = Data:sub(Last,Find)
            Last = Find+1
        } else {
            CurStr = Data:sub(Last,Data:length()) #Data:sub(Last,Max)#:left(65)
            Last = Max
        }       
        
        Lines:pushArray(array(LAST_I,CurStr))
        local St = GpuData[13,number]
        local Ed = St+48
        
        EGP:egpText(LAST_I,CurStr:sub(St,Ed),vec2(10,LAST_Y))
        EGP:egpFont(LAST_I,"Courier New") # monowidth font, sorry not cross-platform :(
        EGP:egpColor(LAST_I,128,255,255,255) LAST_I++ LAST_Y += 19
        
        TotalLines++ 
        if (TotalLines>23 | Last>=Max) { 
            GpuData[11,table] = Lines
            ExplorerDsH = "" 
            ExplorerKeyH = "readermove"  
            return 0 
        } 
    }
    Args[5,number] = TotalLines
    Args[3,number] = Last
    runCmd("alxos_explorer_reader_cmd",1,Args)
    return 1
}

function alxos_explorer_reader(Data:string) { 
    local FInfo = GpuData[7,table] 
    local Count = GpuData[10,number]+(Data:explode(NL):count()-1)
    local Offset = GpuData[12,number]
    if (Count<=24 & FInfo["size",number]>GpuData[8,number]+Offset) {
        local Start = GpuData[8,number]
        local End = ExplorerFS["bytes_in_sector",number]*ExplorerFS["sectors_in_cluster",number]
        if (ExplorerFS["fs_str_id",string]=="WCD") {
            End = 512   
        }
        GpuData[8,number] = Start+End
        local Str = GpuData[9,string]
        GpuData[9,string] = Str+Data
        if (GpuData[10,number]!=Count) {
            local PercID = DialogData[-4,number]
            local BoxID = DialogData[-5,number]
            local BoxW = DialogData[-6,number]
            local CalcP = round(Count/24*100)
            BoxW = ceil(BoxW/100*CalcP)
            EGP:egpSize(BoxID,vec2(BoxW,20))
            EGP:egpText(PercID,CalcP+"%",EGP:egpPos(PercID))
        }
        GpuData[10,number] = Count
        #print(Start+Offset+" | "+End)
        dsSendDirect("fs_readfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,FInfo,Start+Offset+1,End)))      
    } else {
        alxos_explorer_closedialog()
    
        local Str = GpuData[9,string]+Data
        # fix for lines
        if (Count>24) {
            local Tbl = Str:explode(NL)
            local MTbl = Tbl:count()
            local Rm = Count-23
            for (I=1,Rm) {
                Tbl:pop()  
            }
            Str = Tbl:concat(NL)
            GpuData[10,number] = 24
        }
        GpuData[9,string] = Str+NL        
        alxos_explorer_reader_cmd(table(FInfo,Str,0,Str:length(),0,table()))
    }
}

function alxos_explorer_stopsound() {
    if (dsClkName()=="keyboard") {
        alxos_explorer_closedialog()
    }
    dsSendDirect("stopgmsound",Devices["spu",entity],table(0,0))  
    #alxos_explorer_listcurdir()
}

function alxos_explorer_soundplay_ds(Data:string) {
    local Arr = Data:explode("|")
    ExplorerDsH = ""
    if (Arr:count()<2 | Arr[1,string]!="GMS") {
        alxos_explorer_error("This is not Garry's Mod Sound file!",400)    
    #ifdef soundDuration(string)
    } elseif (!soundDuration(Arr[2,string])) {
        alxos_explorer_error("Sound file not found on server!",400)    
    #endif
    } else {
        local Parent = alxos_explorer_dialog("Playing sound",400,60,"ok","alxos_explorer_stopsound")
        
        ExplorerCurTask = "sound"
        
        DialogData[-10,table]:pushNumber(LAST_I)
        EGP:egpText(LAST_I,"Playing sound file, press OK to stop.",vec2(0,-12))
        EGP:egpParent(LAST_I,Parent)
        EGP:egpAlign(LAST_I,1)
        EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
        #ifdef soundDuration(string)
            local Dur = soundDuration(Arr[2,string])
            if (Arr[3,string]=="1") { Dur = 0 } # loop
            dsSendDirect("playgmsound",Devices["spu",entity],table(0,Dur,Arr[2,string]))
        #endif
    }
}

function alxos_explorer_soundplay(Info:table) {
    #ifndef soundDuration(string)
        alxos_explorer_error("E2 Sound extension is not enabled!",360)
        if (1) { return }
    #endif 
    
    if (!Devices["spu",entity]:isValid()) {
        alxos_explorer_error("No sound card detected!",260)
        return
    }
    
    local Parent = alxos_explorer_dialog("Opening file",400,60,"none","alxos_explorer_listcurdir")
    
    DialogData[-10,table]:pushNumber(LAST_I)
    EGP:egpText(LAST_I,"Please wait, this can take few minutes...",vec2(0,-12))
    EGP:egpParent(LAST_I,Parent)
    EGP:egpAlign(LAST_I,1)
    EGP:egpColor(LAST_I,0,0,0,255) LAST_I++
    
    ExplorerDsH = "alxos_explorer_soundplay_ds"
    dsSendDirect("fs_readfile",ExplorerFS["hdd_io",wirelink]:entity(),table(entity(),ExplorerFS["fs_str_id",string],table(ExplorerFS,Info,0,0)))
}

function alxos_explorer_ds(Name:string) {
    if (Name=="fs_listdir") {
        if (ExplorerDsH!="") {
            ExplorerDsH()
        } else {
            alxos_explorer_listdir_draw(dsGetTable())   
        }
    } elseif (Name=="fs_rename") {
        alxos_explorer_listcurdir()
    } elseif (Name=="fs_readfile") { 
        if (ExplorerDsH=="") { return }
        local FileData = dsGetString()
        ExplorerDsH(FileData)
    } elseif (Name=="fs_rawreadfile") {
        if (ExplorerDsH=="") { return }
        local FileData = dsGetTable()
        ExplorerDsH(FileData)
    } elseif (Name=="alxos_runprog") {
        local Info = dsGetTable()
        if (Info[1,string]=="alxos_explorer_reader") {
            alxos_explorer_reader_init(Info[2,table])   
        } elseif(Info[1,string]=="alxos_explorer_soundplay") {
            alxos_explorer_soundplay(Info[2,table])  
        } elseif(Info[1,string]=="alxos_explorer") {
            local TInfo = table(Info[2,table],ExplorerFS,ExplorerAllFs,ExplorerPath,ExplorerDir)
            "alxos_explorer_init"(TInfo)
        } else {
            local TInfo = table(Info[2,table],ExplorerFS,ExplorerAllFs,ExplorerPath,ExplorerDir)
            "alxos_execute"(Info[1,string],TInfo)
        }
    } elseif (Name=="fs_removefile" | Name=="fs_mkfile" | Name=="fs_writefile" | Name=="read_disk" | Name=="fs_rawwritefile") {
        if (ExplorerDsH!="") { ExplorerDsH() }
    } elseif (Name=="nwdata") {
        local Info = dsGetTable()
        local Cmd = Info[5,string]
        if (Cmd=="internet_connect") {
            if (Info[6,string]=="") { return } # loop to self
            if (GpuData["server",table]:count()) { return }
            GpuData["servers",table]:pushTable(table(Info[6,string],Info[1,number]))
        } elseif (Cmd=="internet_request") {
            if (Info[1,number]!=GpuData["server",table][2,number]) { return }
            alxos_explorer_httpdwpost(Info[6,string])
        } elseif (Cmd=="explorer_share") {
            if (GpuData["share_mode",number]==1) {
                local Info = table(GpuData["nwinterface",number],Info[1,number],GpuData["share_local",number],"gpu","explorer_share","Sharing Server #"+entity():id())
                dsSendDirect("nwsend",GpuData["nwcontroller",entity],Info)
            } else {
                if (Info[6,string]=="") { return } # loop to self
                if (GpuData["server",table]:count()) { return }
                GpuData["servers",table]:pushTable(table(Info[6,string],Info[1,number]))
            }
        } elseif (Cmd=="explorer_presend") {
            if (!GpuData["share_started",number]) { return }
            if (GpuData["share_mode",number]==1) {
                alxos_explorer_presendsv(Info)
            } else {
                if (Info[1,number]!=GpuData["server",table][2,number]) { return } 
                alxos_explorer_presendcl(Info)
            }
        } elseif (Cmd=="explorer_sendprogress") {
            if (!GpuData["share_started",number]) { return }
            alxos_explorer_sendprogress(Info[6,number])
        } elseif (Cmd=="explorer_sendfile") {
            if (!GpuData["share_started",number]) { return }
            if (GpuData["share_mode",number]==1) {
                alxos_explorer_sendfile(Info[6,array])
            }
        } elseif (Cmd=="explorer_sharestop") {
            if (!GpuData["share_started",number]) { return }
            alxos_explorer_sharestop(Info[6,string])
        } elseif (Cmd=="explorer_sendpong") {
            if (!GpuData["share_started",number]) { return }
            GpuData["share_timeout",number] = curtime()+5
        }
    }
}

function number alxos_debug_cdburner() {
    if (!checkPerf(12000)) {
        runCmd("alxos_debug_cdburner",33)
        return 0
    }
    "alxos_execute"("alxos_cd_burner",table(table(),ExplorerFS,ExplorerAllFs,ExplorerPath))
    return 0
}
    
function alxos_explorer_init(Args:table) {
    egpClear()

    if (Args:count()) {
        local Info = Args
        alxos_init(Info[2,table],Info[3,table])     
        ExplorerFS = Info[2,table]
        ExplorerAllFs = Info[3,table]
    }
    
    ShutHandler = "alxos_clear"
    PlugHandler = "alxos_explorer_onplug"
    ExplorerCurTask = ""
    
    ExplorerCopy = table()
    ExplorerDsH = ""
    ExplorerKeyH = ""
    DsHandler = "alxos_explorer_ds"    
    ExplorerPath = table("C:")
    
    # THIS CODE IS ONLY FOR DEBUG PURPOSES
    if (DEBUG==2) {
        if (!checkPerf(12000)) {
            runCmd("alxos_debug_cdburner",33)
        } else {
            "alxos_execute"("alxos_cd_burner",table(table(),ExplorerFS,ExplorerAllFs,ExplorerPath))
        }
        return   
    } elseif (DEBUG==3) {
        "alxos_execute"("alxos_console",table(table(),ExplorerFS,ExplorerAllFs,ExplorerPath,ExplorerDir))
        return
    } elseif (DEBUG==4) {
        # it is not inited on cpu so can have BSOD
        "alxos_execute"("alxos_partitions",table(table()))
        return
    } elseif (DEBUG==5) {
        "alxos_execute"("alxos_network_chat",table(table()))
        return
    }
    alxos_explorer_listdir(ExplorerFS,ExplorerFS["root_dir_cluster",number],0)      
}

function alxos_explorer_unplug() {
    if (!ExplorerFS["hddinfo",table]:count() | ExplorerFS["start_sector",number]==-1) {
        local ExplorerOldFs = ExplorerFS
        ExplorerFS = ExplorerAllFs["C",table]    
        ExplorerPath = table("C:")
        ExplorerDir = table(ExplorerFS["root_dir_cluster",number],0)
        if (GpuData["share_started",number]) {
            if (ExplorerCurTask=="sendwrite") {
                dsSendDirect("clear",ExplorerOldFs["hdd_io",wirelink]:entity(),entity())   
            }
            if (GpuData["share_mode",number]==1 | curCmd()=="alxos_explorer_nwsend_progress") {
                alxos_explorer_sharestop(0)
            } else {
                alxos_explorer_sharestop(1)
            }
            alxos_explorer_msg("Disk was unplugged.",200,"Information")
            ExplorerDsH = ""
        } elseif (ExplorerCurTask=="listdir" | ExplorerCurTask=="chvolume") {
            alxos_explorer_msg("Disk was unplugged.",200,"Information")
        } elseif (
            ExplorerCurTask=="paste" | ExplorerCurTask=="mkfile" | ExplorerCurTask=="reader" | ExplorerCurTask=="bmp" | 
            ExplorerCurTask=="sound"
        ) {
            if (ExplorerCurTask=="sound") {
                alxos_explorer_stopsound()    
            }
            stopAllTimers()
            ExplorerDsH = ""
            alxos_explorer_handlers()
            alxos_explorer_msg("Disk was unplugged.",200,"Information")
        }
        if (ExplorerFS["hddinfo",table]["type",number]==1) {
            dsSendDirect("stopdiskrot",dsGetTable()[3,table]["ent",entity],1)    
        }
    } elseif (ExplorerCurTask=="paste") {
        local Step = DialogData[4,number]
        if (Step==1 & !ExplorerCopy["hddinfo",table]:count()) {
            dsSendDirect("clear",ExplorerCopy["hdd_io",wirelink]:entity(),entity())
            stopAllTimers()
            ExplorerDsH = ""
            alxos_explorer_handlers()
            alxos_explorer_msg("Disk was unplugged.",200,"Information")
        }
    }    
}

function alxos_explorer_onplug(Name:string) {
    if (Name=="sata_onplug") {
        local Info = dsGetTable()
        
        if (ExplorerCurTask=="chvolume") {
            alxos_explorer_chvolume(table())
        }
        
        if (!Info[3,number]) {
            alxos_explorer_unplug()
        }
    } elseif (Name=="hddio_unplug") {
    
        if (ExplorerCurTask=="chvolume") {
            alxos_explorer_chvolume(table())
        }
    
        alxos_explorer_unplug()
    } elseif (Name=="cd_newdisc") {
        local Info = dsGetTable()
        if (!Info[3,entity]) {
            
            if (ExplorerCurTask=="chvolume") {
                alxos_explorer_chvolume(table())
            }
            
            alxos_explorer_unplug()
        }
    }
}

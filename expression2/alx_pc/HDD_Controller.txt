@name HDD Controller
#@model models/expression 2/cpu_controller.mdl

#[
    ALX Wiremod E2 PC
    Created by AlexALX
    -------------------
    HDD Controller, purpose:
    - Handle HDDs (aka IDE/SATA controller)
    - File Systems Handler (instead of cpu)
]#

if (first()|duped()) {

#include "alx_pc/hdd/_main_"

setColor(255,172,172)

HDD_IO = entity()
BIOS = getentity(InA)
Board["A",number] = entity():id()
EntID = HDD_IO:id()
Busy = 0
Reload = (first() ? 1 : 0)
Init = 0

CurTask = table() # fix crash

Device_Name = "HDD Controller"

FS_TYPES = table()
HDDS = table()
#HDD_MAX = 4 # maximum hdds, sorry for now only 2 due to "gui problems" 
HDD_MAX = 0

FS_Delay = 0
DsTbl = table()
DsFunc = table()

USB_Device = noentity()
USB_NAME = ""

function init_fs() {
    #include "alx_pc/hdd/raw_fs"
    #include "alx_pc/hdd/wm1_fs"
    #include "alx_pc/cd/wcd_fs"
}

function number hddGetIndex(Ent:entity) {
    for (I=0,HDD_MAX-1) {
        if (Ent==entity(ioGetInputNumber("SATA_"+I))) { return I+1 }
    }
    return 0
}

function hddio_fs(CmdName:string,Args:table) {
    local Name = Args[1,string]
    local Ent = Args[2,entity]
    if (Name=="fs_listdir") {
        dsSendDirect(Name,Ent,CmdResult:clone())  
    } elseif (Name=="fs_mkfile") {
        dsSendDirect(Name,Ent,CmdResult:clone())
    } elseif (Name=="fs_writefile" | Name=="fs_rawwritefile") {
        dsSendDirect(Name,Ent,CmdResult[1,number])
    } elseif (Name=="fs_readfile") {
        dsSendDirect(Name,Ent,CmdResult[1,string])
    } elseif (Name=="fs_rawreadfile") {
        dsSendDirect(Name,Ent,CmdResult[1,array])
    } elseif (Name=="fs_removefile") {
        dsSendDirect(Name,Ent,1)
    } elseif (Name=="fs_add2dir") {
        dsSendDirect(Name,Ent,1)
    }
    hddload(0)
}

DsFunc["clear",string] = "hddio_ds_clear"
function hddio_ds_clear(Name:string) {
    cmdShutdown()
    CurTask = table()
    #[if (!checkPerf(4000)) {
        if (!FS_Delay) { DsTbl = table(Name,dsGetEntity(),3000) }
        CmdDelay = 1
        FS_Delay = 1
        timer("hddio_ds",33) 
        return
    }]#
    #local Ent = (FS_Delay ? DsTbl[2,entity] : dsGetEntity())
    dsSendDirect(Name,dsGetEntity(),1)
    for (I=1,HDD_MAX) {
        local HDD = HDDS[I,table]
        if (HDD["type",number]!=1) { continue }
        dsSendDirect("clearDiskCommands",HDD["ent",entity],1)   
    }
    DsTbl = table()
    FS_Delay = 0
    hddload(0)
}

DsFunc["hddinit",string] = "hddio_ds_hddinit"
function hddio_ds_hddinit(Name:string) {
    if (!checkPerf(3000)) {
        if (!FS_Delay) { DsTbl = table(Name,dsGetTable(),2000) }
        CmdDelay = 1
        FS_Delay = 1
        timer("hddio_ds",33)
        return
    }
    local Tbl = (FS_Delay ? DsTbl[2,table] : dsGetTable())
    local Ent = Tbl[1,wirelink]:entity()
    local I = Tbl[3,number] #hddGetIndex(Ent)
    if (I==0 | !Ent) { exit() }
    local Info = table()
    Info["wirelink",wirelink] = Tbl[1,wirelink]
    Info["hdd_io",wirelink] = wirelink()
    Info["ent",entity] = Ent
    Info["entid",number] = Ent:id()
    Info["localid",number] = I
    local Type = Tbl[2,number]
    Info["type",number] = Type
    Info["name",string] = (USB_NAME!="" ? USB_NAME : Tbl[4,string])
    if (USB_Device!=noentity()) {
        Info["usb",entity] = USB_Device
    }
    if (Type==1) {
        Info["disk_types",table] = Tbl[5,table]
        Info["book_types",array] = Tbl[6,array]
        Info["data_types",array] = Tbl[7,array]
        Info["disk_tracks",array] = Tbl[8,array]
        Info["disk_sectors",array] = Tbl[9,array]
        Info["supported_discs",table] = Tbl[10,table] 
        Info["sector_size",number] = 4
        Info["reader",wirelink] = Tbl[11,wirelink]
        Info["reader_up",wirelink] = Tbl[12,wirelink]
    } else {
        Info["size",number] = Tbl[5,number]
        Info["fs_tbl_size",number] = FS_TBL_SIZE
        Info["fs_max_size",number] = Tbl[5,number]-FS_TBL_SIZE-1
        Info["bank_size",number] = Tbl[6,number]
        Info["sector_size",number] = Tbl[7,number]
        local Banks = Tbl[8,array]
        Info["banks",number] = Banks:count()
        Info["bank",array] = Banks
    }
    HDDS[I,table] = Info
    DsTbl = table()
    FS_Delay = 0
    
    local Post = InitPost[Ent:id(),number]
    if (Post) {
        stoptimer("satapost_"+Ent:id())
        InitPost:unset(Ent:id())
        dsSendDirect("sata_onplug",BIOS,table(entity(),Post,1,Info))
    }    
}

DsFunc["fs_mkfs_check",string] = "hddio_ds_fs"
DsFunc["fs_mkfs",string] = "hddio_ds_fs"
DsFunc["fs_readfs",string] = "hddio_ds_fs"
DsFunc["fs_listdir",string] = "hddio_ds_fs"
DsFunc["fs_mkfile",string] = "hddio_ds_fs"
DsFunc["fs_writefile",string] = "hddio_ds_fs"
DsFunc["fs_readfile",string] = "hddio_ds_fs"
DsFunc["fs_rawreadfile",string] = "hddio_ds_fs"
DsFunc["fs_rawwritefile",string] = "hddio_ds_fs"
DsFunc["fs_mkboot",string] = "hddio_ds_fs"
DsFunc["fs_removefile",string] = "hddio_ds_fs"
DsFunc["fs_add2dir",string] = "hddio_ds_fs"
DsFunc["fs_rename",string] = "hddio_ds_fs"
function hddio_ds_fs(Name:string) {
    if (Busy) { return }
    if (!checkPerf(11000)) {
        if (!FS_Delay) { DsTbl = table(Name,dsGetTable(),12000) }
        CmdDelay = 1
        FS_Delay = 1
        #Busy = 0
        timer("hddio_ds",33) 
        return
    }
    Busy = 1
    
    local FName = Name:sub(4)
    local Info = (FS_Delay ? DsTbl[2,table] : dsGetTable())
    if (FS_Delay) {
        FS_Delay = 0
    }        
    
    switch(FName) {
    case "mkfs_check",
        local Func = Info[2,string]:lower()+"_"+FName
        dsSendDirect(Name,Info[1,entity],Func(Info[3,array])[string])
        hddload(0)
    break
    case "mkfs",
        local Func = Info[2,string]:lower()+"_"+FName
        local Args = Info[3,table]
        CmdCompleteCallback = table(Func,"hddio_fs",table(Name,Info[1,entity]))      
        local Ret = Func(Args)[number]
        dsSendDirect(Name,Info[1,entity],Ret)
        if (Ret!=2) { hddload(0) }
    break
    case "readfs",
        local Func = Info[2,string]:lower()+"_"+FName
        local Args = Info[3,table]
        if (FName!="") {
            local Ret = Func(Args)[table] 
            if (!Ret["wait",number]) {
                dsSendDirect(Name,Info[1,entity],Ret)
                hddload(0)
            } else {
                Func += "_callback"
                Func(table(0,Info[1,entity]))
            }
        } else {
            dsSendDirect(Name,Info[1,entity],table())
            hddload(0)
        }
    break
    case "listdir",
    case "mkfile",
    case "removefile",
        local Func = Info[2,string]:lower()+"_"+FName
        local Args = Info[3,table]
        CmdCompleteCallback = table(Func,"hddio_fs",table(Name,Info[1,entity]))
        Func(Args)   
    break
    case "writefile",
        local Func = Info[2,string]:lower()+"_"+FName
        local Args = Info[3,table]
        CmdCompleteCallback = table(Func+"_finish","hddio_fs",table(Name,Info[1,entity]))
        Func(Args)
    break
    case "readfile",
    case "rawreadfile",
    case "rawwritefile",
        local Func = Info[2,string]:lower()+"_"+FName
        local Args = Info[3,table]        
        CmdCompleteCallback = table(Func+(FName=="readfile" ? "_finish" : ""),"hddio_fs",table(Name,Info[1,entity]))
        if (!Func(Args)[number]) {
            dsSendDirect(Name,Info[1,entity],0)
            hddload(0)
        }
    break
    case "mkboot",
        local Func = Info[2,string]:lower()+"_"+FName
        local Args = Info[3,table]
        Func(Args)
        dsSendDirect(Name,Info[1,entity],0)
        hddload(0)
    break
    case "add2dir",
        local Func = Info[2,string]:lower()+"_"+FName
        local Args = Info[3,table]
        CmdCompleteCallback = table(Func+"_finish","hddio_fs",table(Name,Info[1,entity]))
        Func(Args)
    break
    case "rename",
        local Func = Info[2,string]:lower()+"_"+FName
        local Args = Info[3,table]
        Func(Args)
        dsSendDirect(Name,Info[1,entity],0)
        hddload(0)
    break
    }
    
    #print(opcounter())
}

DsFunc["addfs2tbl",string] = "hddio_ds_addfs2tbl"
function hddio_ds_addfs2tbl(Name:string) {
    if (Busy) { return }
    local Tbl = dsGetTable()
    local Ent = Tbl[1,entity]
    local HDD = Tbl[2,table]
    local Info = Tbl[4,array]
    local FsTbl = readfstbl(HDD)
    if (!FsTbl:count()) {
        mkfstbl(HDD)
        FsTbl = readfstbl(HDD)
    }
    local N = Tbl[3,number]
    if (N==-1) { N = findfreetbl(FsTbl) }
    local St = addfs2tbl(HDD,FsTbl,N,Info[1,number],Info[2,number],Info[3,number])
    dsSendDirect(Name,Ent,table(FsTbl,St))
    hddload(0)
}

DsFunc["removefstbl",string] = "hddio_ds_removefstbl"
function hddio_ds_removefstbl(Name:string) {
    if (Busy) { return }
    local Tbl = dsGetTable()
    removefstbl(Tbl[1,table],Tbl[2,number])
    hddload(0)
}

DsFunc["formatdisk",string] = "hddio_ds_formatdisk"
function hddio_ds_formatdisk(Name:string) {
    if (Busy) { return }
    formatDisk(dsGetTable())
    hddload(0)
}

DsFunc["activefstbl",string] = "hddio_ds_activefstbl"
function hddio_ds_activefstbl(Name:string) {
    if (Busy) { return }
    local Tbl = dsGetTable()
    activefstbl(Tbl[2,table],Tbl[3,number])
    dsSendDirect(Name,Tbl[1,entity],0)
    hddload(0)
}

DsFunc["readfstbl",string] = "hddio_ds_readfstbl"
function hddio_ds_readfstbl(Name:string) {
    if (Busy) { return }
    if (!checkPerf(10000)) {
        if (!FS_Delay) { DsTbl = table(Name,dsGetTable(),11000) }
        CmdDelay = 1
        FS_Delay = 1
        timer("hddio_ds",33) 
        return
    }
    local Tbl = (FS_Delay ? DsTbl[2,table] : dsGetTable())
    dsSendDirect(Name,Tbl[1,entity],readfstbl(Tbl[2,table]))
    hddload(0)
    if (FS_Delay) {
        DsTbl = table()
        FS_Delay = 0
    }
}

DsFunc["format_cd_disk",string] = "hddio_ds_format_cd_disk"
function hddio_ds_format_cd_disk(Name:string) {
    if (Busy) { return }
    local Info = dsGetTable()
    Info[-1,string] = Name
    formatDiskCD(Info)
}

DsFunc["read_disk",string] = "hddio_ds_read_disk"
function hddio_ds_read_disk(Name:string) {
    local Tbl = dsGetTable()
    local Ret = Tbl[1,string]
    local Callback = Tbl[4,string]
    if (Ret=="init" | Ret=="reinit") {
        if (Ret=="reinit") {
            local ID = Tbl[3,table]["ent",entity]:id()
            WCD_ReadBuffer[ID,table] = table() 
            Tbl[-1,number] = 1   
        }
        #Tbl[-2,entity] = entity()
        dsSendDirect(Name,Tbl[3,table]["ent",entity],Tbl)
    } elseif(Ret=="OK") {
        local Drive = Tbl[3,table]
        local Info = readcdinfo(Drive)
        local FS = Tbl[5,table]
        if (FS:count()) {
            tbl_merge(FS,Info) 
            local ID = FS["hddinfo",table]["ent",entity]:id()
            WCD_WriteBuffer[ID,table] = table()
        }
        if (Callback!="") {
            Callback(table(1,Ret,Tbl,Info))
        } else {
            dsSendDirect(Name,Tbl[2,entity],table(Ret,Info))
        }
        hddload(0)
    } else {
        local FS = Tbl[5,table]
        if (FS:count()) {
            local Drive = Tbl[3,table]
            local Info = readcdinfo(table())
            tbl_merge(FS,Info)
            local ID = FS["hddinfo",table]["ent",entity]:id()
            WCD_WriteBuffer[ID,table] = table()
        }    
        if (Callback!="") {
            Callback(table(1,Ret,Tbl))
        } else {
            dsSendDirect(Name,Tbl[2,entity],table(Ret))
        }
        hddload(0)
    }
}

DsFunc["writeDiskIO",string] = "hddio_ds_diskIO"
DsFunc["readDiskIO",string] = "hddio_ds_diskIO"
DsFunc["clearDiskBuffer",string] = "hddio_ds_diskIO"
DsFunc["clearDiskCommands",string] = "hddio_ds_diskIO"
function hddio_ds_diskIO(Name:string) {
    if (!checkPerf(5000)) {
        if (!FS_Delay) { DsTbl = table(Name,dsGetTable(),6000) }
        CmdDelay = 1
        FS_Delay = 1
        timer("hddio_ds",33) 
        return
    }
    local Info = (FS_Delay ? DsTbl[2,table] : dsGetTable())
    if (Info[2,string]!="") {
        Info[2,string](Name,Info[4,table])
    } elseif (Info[2,number]) {
        dsSendDirect(Name,Info[1,entity],1)
        hddload(0)
    } else {
        dsSendDirect(Name,Info[3,table]["ent",entity],Info)
    }
    FS_Delay = 0
}

DsFunc["moveTo",string] = "hddio_ds_diskMove"
function hddio_ds_diskMove(Name:string) {
    local Info = dsGetTable()
    if (Info[2,string]!="") {
        Info[2,string](Name,Info[4,table])
    }
}

DsFunc["init",string] = "hddio_ds_init"
function hddio_ds_init(Name:string) {
    #[local Tbl = dsGetTable()
    local HDD = HDDS[Tbl[2,number],table]
    dsSendDirect(Name,Tbl[1,entity],HDD)]#
    local Info = dsGetTable()
    NB = Info[1,string]
    TickQuota = Info[4,number]
    if (Info[3,number]==0) {
        HDDS = table()
        for (I=0,HDD_MAX-1) {
            dsSendDirect("sata_init",entity(ioGetInputNumber("SATA_"+I)),table(entity(),I*20,I+1))
        }
        timer("init_io",HDD_MAX*20+20)
    } else {
        hddload(0)
    }
    #dsSendDirect(Name,dsGetEntity(),table(HDDS,HDD_MAX,FS_TYPES))
}

DsFunc["hddfstbl",string] = "hddio_ds_hddfstbl"
function hddio_ds_hddfstbl(Name:string) {
    if (Busy) { return }
    local Start = (FS_Delay ? DsTbl[4,number] : 1)
    local FsTbl = (FS_Delay ? DsTbl[5,table] : table())
    for (I=Start,HDD_MAX) {
        if (!checkPerf(6000)) { break }
        if (!HDDS[I,table]:count()) { Start++ continue }
        FsTbl[I,table] = readfstbl(HDDS[I,table])
        Start++
    }
    if (Start<=HDD_MAX) {
        if (!FS_Delay) { DsTbl = table(Name,dsGetEntity(),7000,Start,FsTbl) }
        else { DsTbl[4,number] = Start }
        FS_Delay = 1
        CmdDelay = 1
        timer("hddio_ds",33) 
        return
    }    
    
    local Ent = (FS_Delay ? DsTbl[2,entity] : dsGetEntity())
    if (FS_Delay) { FS_Delay = 0 }
    
    dsSendDirect(Name,Ent,FsTbl)
    hddload(0)
}

function hddio_shutdown() {
    if (!Init) { hddload(0) return }

    cmdShutdown()
    CurTask = table()
    
    #[if (!perf()) {
        FS_Delay = 2
        DsTbl = table(Name,dsGetNumber(),8000)
        timer("hddio_ds",75)
        return
    }]#
    for (I=1,HDD_MAX) {
        dsSendDirect("SHUTDOWN",HDDS[I,table]["ent",entity],entity())
        HDDS[I,table]:clear()
    }
    #local Num = (FS_Delay==2 ? DsTbl[2,number] : dsGetNumber())
    #dsSendDirect("SHUTDOWN",BIOS,Num)
    FS_Delay = 0
    DsTbl = table()
    Init = 0
    hddload(0)
}

DsFunc["cd_newdisc",string] = "hddio_ds_newdisc"
function hddio_ds_newdisc(Name:string) {
    if (!Init) { return }
    local Info = dsGetTable()
    dsSendDirect("cd_newdisc",BIOS,Info)
}

DsFunc["fs_emptyfs",string] = "hddio_ds_emptyfs"
function hddio_ds_emptyfs(Name:string) {
    if (!Init) { return }
    local Info = dsGetTable()
    if (Info[3,table]["fs_str_id",string]=="WCD") {
        dsSendDirect(Name,Info[1,entity],wcd_emptyfs(Info[2,table]))   
    }
    hddload(0)
}


function hddio_ds() {
    # damn not sure how to fix this better
    #print(Quota,opcounter(),minquota())
    if (FS_Delay==1 & !checkPerf(DsTbl[3,number])) {
        #local Dly = ceil(opcounter()/softQuota())*33
        #print(Dly, perf(), perf(70), perf(80), perf(90), perf(100))
        timer("hddio_ds",40)
        return
    }
    "hddio_ds"(DsTbl[1,string])   
}

#[function hddio_init_sata() {
    for (I=0,HDD_MAX-1) {
        local Ent = entity(ioGetInputNumber("SATA_"+1))
        if (Ent) {
            
        }
    }
}]#

function pcie_init(ID:string) {
    InitPost = table()
    HDD_MAX = (ID=="pcie" ? 4 : 2)
    dsSendDirect(ID,BIOS,table("hdd",wirelink(),Device_Name,HDD_MAX,HDDS))
    #hddio_init_sata()
}

function usb_init() {
    InitPost = table()
    Init = 1
    local Info = dsGetTable()
    HDD_MAX = 1
    USB_NAME = Info[1,string]
    USB_Device = Info[2,entity]
    dsSendDirect("usbcontroller",USB_Device,table("hdd",wirelink(),table(HDD_MAX,HDDS)))
}

function usb_onplug(Name:string) {
    if (Init) {
        local ID = Name:right(1):toNumber()+1
        local Ent = entity(ioGetInputNumber(Name))
        if (Ent) {
            if (Busy) { return }
            InitPost[Ent:id(),number] = ID
            timer("satapost_"+Ent:id(),100)
            dsSendDirect("sata_init",Ent,table(entity(),0,ID))
        } else {
            local HDD = HDDS[ID,table]:clone()
            dsSendDirect("sata_onplug",BIOS,table(entity(),ID,0,HDD))
            HDDS[ID,table]:clear()
        }
    }    
}

function hddio_ds(Name:string) {
    local Func = DsFunc[Name,string]
    if (Func!="") {
        if (Name!="hddinit" & Name!="cd_newdisc") { hddload(1) }
        Func(Name)
    } elseif (Name=="SHUTDOWN") {
        hddio_shutdown()
    } elseif (Name=="pcie" | Name=="pci") {
        pcie_init(Name)
    } elseif (Name=="usbcontroller") {
        usb_init()
    } elseif (Name=="usbpost") {
        usb_onplug("SATA_0")
    }
    exit()
}

#dsSend("reload","HDD_IO",entity())

#timer("reload",50)

#dsSendDirect("reload",BIOS,"hdd")

#registerDS("hddio")


timer("init_fs",1)

}

if (clk("init_fs")) {
    if (opcounter()<1000) {
        init_fs()
        if (Reload) {
            dsSendDirect("reload",BIOS,"hdd")
        }
    } else {
        timer("init_fs",1)
    }
    exit()
}

#[if (last()) {
    for (I=0,HDD_MAX-1) {
        dsSendDirect("unlink",entity(ioGetInputNumber("SATA_"+I)),entity())
    }
}]#

if (dupefinished()) {
    Board["A",number] = entity():id()
    BIOS = getentity(InA)
}

if (~InA) {
    local New_BIOS = getentity(InA)
    if (BIOS!=New_BIOS & Init) {
        #hddShutdown()
        hddio_shutdown()
    }
    BIOS = New_BIOS
}

if (inputClk()) {
    local Name = inputClkName()
    if (Name:find("SATA_")) {
        usb_onplug(Name)
    }
    exit()
}

if (!BIOS:isValid()) { exit() }

if (clk(clkName())) {
    local Name = clkName()
    if (Name=="hddio_ds") {
        hddio_ds()
    } elseif (Name:left(4)=="cmd_") {
        cmd_timer(Name)
    } elseif (Name=="init_io") {
        Init = 1
        dsSendDirect("hddinfo",BIOS,table(HDDS,HDD_MAX,FS_TYPES))
        hddload(0)
    } elseif (Name=="reload") {
        dsSendDirect("reload",BIOS,"hdd")
    } elseif (Name:find("satapost_")) {
        local ID = Name:right(Name:length()-Name:find("_")):toNumber()
        local Post = InitPost[ID,number]
        if (Post) {
            #dsSendDirect("sata_onplug",BIOS,table(entity(),Post,0,HDDS[Post,table]))
            # we don't send data because its invalid hdd connected
            HDDS[Post,table] = table()
        }
    }
    exit()
}

if (dsClk()) {
    hddio_ds(dsClkName())
    exit()
}

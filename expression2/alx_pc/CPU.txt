@name CPU
@model models/cheeze/wires/cpu.mdl

#[
    ALX Wiremod E2 PC
    Created by AlexALX
    -------------------
    E2 CPU, purpose:
    - init boot loader
    - Keyboard handler
    - alxos e2 cpu programs
    - plug & play handle for OS
]#

if (first()|duped()) {
    
#include "alx_pc/cpu/_main_"
#include "alx_pc/cpu/_boot_"

setColor(178,178,255)
    
BIOS = getentity(InA)
Board["A",number] = entity():id()
if (!duped()) {
    dsSendDirect("reload",BIOS,"cpu")
}
Init = 0

Device_Name = "ALX Phantom C1"
KeyUser = noentity()
 
function err(ERR) {
    dsSendDirect("err",BIOS,ERR)
    exit()
}

#[
function getHddsInfo(Step) {
    if (Step<HDDS:count()) {
        Step++
        CpuData[2,number] = Step
        local HDD = HDDS[Step,entity]
        if (HDD:isValid()) {
            dsSendDirect("hddinfo",HDD,entity())
        } else {
            CpuData[Step+2,array] = array()
            getHddsInfo(Step)
        }
    } else {
        local Info = CpuData:clone()
        Info:shift()
        Info:shift()
        dsSendDirect("hddinfo",CpuData[1,entity],Info)
    }
}]#

function ready() {
    handleKeys(KeyUser)
    dsSendDirect("ready",E2_GPU,SysFs)
}

function socket_init() {
    dsSendDirect("cpu_socket",BIOS,table("cpu",entity(),Device_Name))    
}

}

if (dupefinished()) {
    Board["A",number] = entity():id()
    BIOS = getentity(InA)
}

if (~InA) {
    local New_BIOS = entity(InA)
    if (BIOS!=New_BIOS & Init) {
        cpuShutdown()
    }
    BIOS = New_BIOS
}

if (!BIOS:isValid()) { exit() }

if (dsClk()) {
    local Name = dsClkName()
    if (Name=="init") {
        Init = 1
        local Info = dsGetTable()
        NB = Info[1,string]
        Devices = Info[2,table]
        E2_GPU = Devices["gpu",entity]
        E2_SPU = Devices["spu",entity]
        Keyboard = Devices["keyboard",table]
        HDD_IO = Devices["hdd_io",array]
        HDDS = Info[5,table]
        TickQuota = Info[7,number]
        if (!Info[4,number]) {
            dsSendDirect(Name,BIOS,"cpu")
        }
    } elseif (Name=="cpu_socket") {
        socket_init()
    } elseif (Name=="fstbl") {
        CurFs = dsGetTable()
    } elseif (Name=="keyboard") {
        local Info = dsGetTable()
        if (Info[1,string]=="Memory") {
            dsSendDirect("keyboard",E2_GPU,Info[2,number])
        } else {
            handleKeys(Info[2,entity])
        }
    } elseif (Name=="SHUTDOWN") {
        cpuShutdown()
        #dsSendDirect("SHUTDOWN",BIOS,dsGetNumber())
    } elseif (Name=="hddinfo") {
        #[local Type = dsGetType()
        if (Type=="entity") {
            CpuData = table()
            CpuData[1,entity] = dsGetEntity()
            getHddsInfo(0)  
        } else {
            local Info = dsGetArray()
            local Step = CpuData[2,number]
            CpuData[Step+2,array] = Info
            getHddsInfo(Step)
        }]#
        #dsSendDirect("gethdds",BIOS,dsGetEntity())
    } elseif (Name=="ready") {
        KeyUser = dsGetEntity()
        ready()
    } elseif (Name=="bootmenu") {
        initboot()
    } elseif (DsHandler!="") {
        DsHandler(Name)
    }
}

if (keyClk(KeyUser) & Keyboard) {
    local Key = keyClkPressed()
    dsSendDirect("keyboard",E2_GPU,array(Key,KeyUser:keyPressed(Key)))
    exit()
}

if (clk("cmd")) {
    cmdClk()
    exit()
}

if (clk(clkName())) {
    local Name = clkName()
    if (SharedTimers:exists(Name)) {
        SharedTimers[Name,string]()
    }
}
